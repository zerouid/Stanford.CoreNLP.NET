// StanfordLexicalizedParser -- a probabilistic lexicalized NL CFG parser
// Copyright (c) 2002, 2003 Leland Stanford Junior University
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/ .
//
// For more information, bug reports, fixes, contact:
//    Christopher Manning
//    Dept of Computer Science, Gates 2A
//    Stanford CA 94305-9020
//    USA
//    parser-support@lists.stanford.edu
//    https://nlp.stanford.edu/software/lex-parser.html
using Edu.Stanford.Nlp.Util;




namespace Edu.Stanford.Nlp.Parser.UI
{
	/// <summary>A simple GUI app for Parsing.</summary>
	/// <remarks>
	/// A simple GUI app for Parsing.  Allows a user to load a parser created
	/// using lexparser.LexicalizedParser, load a text data file or type in text,
	/// parse sentences within the input text, and view the resultant parse tree.
	/// Usage:
	/// <c>java edu.stanford.nlp.parser.ui.ParserPanel [parserFilename] [textFilename]</c>
	/// </remarks>
	/// <author>Huy Nguyen (htnguyen@cs.stanford.edu)</author>
	/// <seealso cref="ParserPanel"/>
	[System.Serializable]
	public class Parser : JFrame
	{
		private const long serialVersionUID = 7179757799978939358L;

		private ParserPanel parserPanel;

		/// <summary>
		/// Creates a new Parser Frame using
		/// <see cref="Parser(string, string)"/>
		/// with both arguments being
		/// <see langword="null"/>
		/// .
		/// </summary>
		public Parser()
			: this(null, null)
		{
		}

		/// <summary>Creates new Parser Frame.</summary>
		/// <param name="parserFilename">
		/// path to the serialized parser to load during
		/// initialization
		/// </param>
		/// <param name="dataFilename">path to the data file to load during initialization</param>
		public Parser(string parserFilename, string dataFilename)
		{
			InitComponents();
			parserPanel = new ParserPanel();
			GetContentPane().Add("Center", parserPanel);
			if (parserFilename != null)
			{
				parserPanel.LoadParser(parserFilename);
			}
			if (dataFilename != null)
			{
				parserPanel.LoadFile(dataFilename);
			}
			Pack();
		}

		/// <summary>
		/// This method is called from within the constructor to
		/// initialize the form.
		/// </summary>
		/// <remarks>
		/// This method is called from within the constructor to
		/// initialize the form.
		/// WARNING: Do NOT modify this code. The content of this method is
		/// always regenerated by the Form Editor.
		/// </remarks>
		private void InitComponents()
		{
			//GEN-BEGIN:initComponents
			jMenuBar1 = new JMenuBar();
			jMenu1 = new JMenu();
			loadDataItem = new JMenuItem();
			loadParserItem = new JMenuItem();
			jSeparator1 = new JSeparator();
			exitItem = new JMenuItem();
			jMenu2 = new JMenu();
			untokEngItem = new JCheckBoxMenuItem();
			tokChineseItem = new JCheckBoxMenuItem();
			untokChineseItem = new JCheckBoxMenuItem();
			SetTitle("Parser");
			AddWindowListener(new _WindowAdapter_92(this));
			jMenu1.SetText("File");
			loadDataItem.SetAccelerator(KeyStroke.GetKeyStroke(KeyEvent.VkO, InputEvent.AltMask));
			loadDataItem.SetMnemonic('o');
			loadDataItem.SetText("Load File");
			loadDataItem.SetToolTipText("Load a data file.");
			loadDataItem.AddActionListener(null);
			jMenu1.Add(loadDataItem);
			loadParserItem.SetText("Load Parser");
			loadParserItem.AddActionListener(null);
			jMenu1.Add(loadParserItem);
			jMenu1.Add(jSeparator1);
			exitItem.SetAccelerator(KeyStroke.GetKeyStroke(KeyEvent.VkX, InputEvent.AltMask));
			exitItem.SetMnemonic('x');
			exitItem.SetText("Exit");
			exitItem.SetToolTipText("Exits the program.");
			exitItem.AddActionListener(null);
			jMenu1.Add(exitItem);
			jMenuBar1.Add(jMenu1);
			SetJMenuBar(jMenuBar1);
			Pack();
		}

		private sealed class _WindowAdapter_92 : WindowAdapter
		{
			public _WindowAdapter_92(Parser _enclosing)
			{
				this._enclosing = _enclosing;
			}

			public override void WindowClosing(WindowEvent evt)
			{
				this._enclosing.ExitForm(evt);
			}

			private readonly Parser _enclosing;
		}

		//GEN-END:initComponents
		private void ExitItemActionPerformed(ActionEvent evt)
		{
			//GEN-FIRST:event_exitItemActionPerformed
			//GEN-HEADEREND:event_exitItemActionPerformed
			ExitForm(null);
		}

		//GEN-LAST:event_exitItemActionPerformed
		private void LoadParserItemActionPerformed(ActionEvent evt)
		{
			//GEN-FIRST:event_loadParserItemActionPerformed
			//GEN-HEADEREND:event_loadParserItemActionPerformed
			parserPanel.LoadParser();
		}

		//GEN-LAST:event_loadParserItemActionPerformed
		private void LoadDataItemActionPerformed(ActionEvent evt)
		{
			//GEN-FIRST:event_loadDataItemActionPerformed
			//GEN-HEADEREND:event_loadDataItemActionPerformed
			parserPanel.LoadFile();
		}

		//GEN-LAST:event_loadDataItemActionPerformed
		/// <summary>Exit the Application</summary>
		private void ExitForm(WindowEvent evt)
		{
			//GEN-FIRST:event_exitForm
			System.Environment.Exit(0);
		}

		//GEN-LAST:event_exitForm
		/// <param name="args">the command line arguments</param>
		public static void Main(string[] args)
		{
			DisabledPreferencesFactory.Install();
			string dataFilename = null;
			string parserFilename = null;
			if (args.Length > 0)
			{
				if (args[0].Equals("-h"))
				{
					System.Console.Out.WriteLine("Usage: java edu.stanford.nlp.parser.ui.Parser [parserfilename] [textFilename]");
				}
				else
				{
					parserFilename = args[0];
					if (args.Length > 1)
					{
						dataFilename = args[1];
					}
				}
			}
			Edu.Stanford.Nlp.Parser.UI.Parser parser = new Edu.Stanford.Nlp.Parser.UI.Parser(parserFilename, dataFilename);
			parser.SetVisible(true);
		}

		private JCheckBoxMenuItem untokEngItem;

		private JCheckBoxMenuItem tokChineseItem;

		private JCheckBoxMenuItem untokChineseItem;

		private JMenu jMenu2;

		private JMenuItem loadParserItem;

		private JMenuItem loadDataItem;

		private JSeparator jSeparator1;

		private JMenu jMenu1;

		private JMenuItem exitItem;

		private JMenuBar jMenuBar1;
		// Variables declaration - do not modify//GEN-BEGIN:variables
		// End of variables declaration//GEN-END:variables
	}
}
