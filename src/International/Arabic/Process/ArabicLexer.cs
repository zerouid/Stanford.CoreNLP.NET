/* The following code was generated by JFlex 1.5.1 */
using System;
using System.Collections.Generic;
using Edu.Stanford.Nlp.Ling;
using Edu.Stanford.Nlp.Process;
using Edu.Stanford.Nlp.Util;
using Edu.Stanford.Nlp.Util.Logging;






namespace Edu.Stanford.Nlp.International.Arabic.Process
{
	/// <summary>Tokenizer for UTF-8 Arabic.</summary>
	/// <remarks>
	/// Tokenizer for UTF-8 Arabic. Supports raw text and both sections
	/// (vocalized and unvocalized) of the ATB.
	/// </remarks>
	/// <author>Spence Green</author>
	public class ArabicLexer
	{
		/// <summary>A logger for this class</summary>
		private static Redwood.RedwoodChannels log = Redwood.Channels(typeof(Edu.Stanford.Nlp.International.Arabic.Process.ArabicLexer));

		/// <summary>This character denotes the end of file</summary>
		public const int Yyeof = -1;

		/// <summary>initial size of the lookahead buffer</summary>
		private const int ZzBuffersize = 16384;

		/// <summary>lexical states</summary>
		public const int Yyinitial = 0;

		/// <summary>
		/// ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
		/// ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
		/// at the beginning of a line
		/// l is of the form l = 2*k, k a non negative integer
		/// </summary>
		private static readonly int[] ZzLexstate = new int[] { 0, 0 };

		/// <summary>Translates characters to character classes</summary>
		private const string ZzCmapPacked = "\xb\x0\x1\x23\x1\x2\x1\x3\x1\x4\x1\x1\x16\x0\x1\x23\x1\x25\x1\x24" + "\x1\x7\x1\x2c\x2\x7\x1\x2c\x2\x24\x1\x7\x1\x17\x1\x28\x1\xf\x1\x6" + "\x1\x22\xc\x2d\x1\x21\x1\x2c\x1\x24\x1\x2c\x1\x24\x1\x25\x1\x4d\x1\x34"
			 + "\x1\x67\x1\x37\x1\x49\x1\x41\x1\x34\x1\x47\x1\x2e\x3\x34\x1\x65\x1\x3d" + "\x1\x3f\x1\x39\x1\x32\x1\x34\x1\x43\x1\x35\x1\x2f\x1\x4b\x1\x34\x1\x33" + "\x3\x34\x1\x10\x1\xc\x1\x16\x1\x2c\x1\xe\x1\x2c\x1\x2a\x1\x66\x1\x36" + "\x1\x48\x1\x40\x1\x2a\x1\x46\x1\x1b\x3\x2a\x1\x64\x1\x3c\x1\x3e\x1\x38"
			 + "\x1\x1f\x1\x2a\x1\x42\x1\x2b\x1\x1e\x1\x4a\x1\x2a\x1\x29\x3\x2a\x1\x25" + "\x1\x24\x1\x25\x1\x7\x6\x0\x1\x3\x20\x0\x1\x4c\xb\x7\x1\x19\x2\x7" + "\x1\x19\x7\x7\x1\x19\x4\x7\x1\x19\x5\x7\x1b\x18\x1\x0\x25\x18\x1\x0" + "\xcf\x18\x1\x20\x10b\x18\x1f\x18\xa2\x18\x4\x18\xe\x18\x10\x18\x5\x18\x7\x18"
			 + "\x1\x18\x1\x18\x1\x18\xc9\x18\x5\x18\x1\x18\x2\x18\x2\x18\x4\x18\x6\x0" + "\x2\x18\x1\x18\x1\x0\x3\x18\x1\x0\x1\x18\x1\x0\x18\x18\x1\x0\x36\x18" + "\x1\x18\x2e\x18\x1\x18\x5\x18\x4\x18\xca\x18\x1\x0\x5\x18\x2\x0\x69\x18" + "\x1\x18\x2e\x18\xc\x18\x14\x18\x1a\x18\x2\x18\xb\x0\x2e\x18\x2\x0\x1\x18"
			 + "\x6\x18\x1\x0\x2f\x18\xb\x0\x37\x18\x1\x0\x1\x18\x1\x0\x2\x18\x1\x0" + "\x2\x18\x1\x0\x1\x18\xa\x0\x21\x18\x5\x0\x3\x18\xf\x0\xe\x7\x2\xb" + "\xf\xd\x5\x7\x1\x18\x2b\x1a\x1\x15\x1\x1a\x1\x11\x4\x1a\x4\xd\x1\x14" + "\x11\xd\x1\x0\xc\xa\x1\x7\x2\xb\x1\x7\x2\x1a\x1\xd\x8f\x1a\x1\x7"
			 + "\x1\x1a\x11\xd\x2\x1a\x7\xd\x2\x1a\xc\xa\x3\x1a\x2\xd\x1\x1a\x11\x0" + "\x1\x18\x1\x18\x1\x18\x24\x18\x23\x18\x3f\x18\x2e\x18\xd\x18\x1\x18\x10\x0" + "\xc\xa\x29\x18\xb\x18\x2\x18\x4\x0\x1\x18\x5\x0\x1a\x18\x4\x0\x1\x18" + "\xb\x0\x1\x18\x3\x0\x1\x18\x1b\x0\x1f\x18\x6b\x0\x1\x18\x1\x0\xd\x18"
			 + "\x7b\x0\x4\x18\x42\x18\x2\x0\x1\x18\x1\x18\x15\x18\x1\x0\x1\x18\x5\x18" + "\x2\x0\xc\x18\x2\x18\x2\x0\xc\xa\x1\x0\x7\x18\x1\x0\x7\x18\x1\x0" + "\x3\x18\x1\x0\xa\x18\x2\x0\x2\x18\x2\x0\x1a\x18\x1\x0\x7\x18\x1\x0" + "\x1\x18\x3\x0\x4\x18\x2\x0\x1\x18\x1\x18\x7\x18\x2\x0\x2\x18\x2\x0"
			 + "\x3\x18\x1\x18\xa\x0\x1\x18\x4\x0\x2\x18\x1\x0\x3\x18\x2\x18\x2\x0" + "\xc\xa\x2\x18\x11\x0\x3\x18\x1\x0\x6\x18\x4\x0\x2\x18\x2\x0\x1a\x18" + "\x1\x0\x7\x18\x1\x0\x2\x18\x1\x0\x2\x18\x1\x0\x2\x18\x2\x0\x1\x18" + "\x1\x0\x16\x18\xb\x0\x4\x18\x1\x0\x1\x18\x7\x0\xc\xa\x2\x0\x3\x18"
			 + "\xe\x0\x3\x18\x1\x0\xb\x18\x1\x0\x3\x18\x1\x0\x1a\x18\x1\x0\x7\x18" + "\x1\x0\x2\x18\x1\x0\x5\x18\x2\x0\x1\x18\x1\x18\x16\x18\x1\x18\x11\x0" + "\x2\x18\x4\x0\xc\xa\x19\x0\xa\x18\x2\x0\x2\x18\x2\x0\x1a\x18\x1\x0" + "\x7\x18\x1\x0\x2\x18\x1\x0\x5\x18\x3\x0\x1\x18\x24\x0\x2\x18\x1\x0"
			 + "\x3\x18\x4\x0\xc\xa\x1\x0\x1\x18\x14\x0\x1\x18\x1\x18\x1\x0\x6\x18" + "\x3\x0\x3\x18\x1\x0\x4\x18\x3\x0\x2\x18\x1\x0\x1\x18\x1\x0\x2\x18" + "\x3\x0\x2\x18\x3\x0\x3\x18\x3\x0\xe\x18\x4\x0\x5\x18\x3\x0\x3\x18" + "\x1\x0\x4\x18\x2\x0\x1\x18\x19\x0\xc\xa\x15\x0\x3\x18\x1\x0\xa\x18"
			 + "\x1\x0\x3\x18\x1\x0\x1b\x18\x1\x0\xc\x18\x1\x0\x5\x18\x3\x0\x1\x18" + "\x1f\x18\x1\x0\x2\x18\x6\x0\x2\x18\x4\x0\xc\xa\x19\x0\xa\x18\x1\x0" + "\x3\x18\x1\x0\x1b\x18\x1\x0\xc\x18\x1\x0\x5\x18\x3\x0\x1\x18\x28\x0" + "\x1\x18\x1\x0\x2\x18\x4\x0\xc\xa\x1\x0\x2\x18\x16\x0\xa\x18\x1\x0"
			 + "\x3\x18\x1\x0\x33\x18\x2\x0\x1\x18\x7\x18\x1\x0\x3\x18\x5\x0\x1\x18" + "\x15\x0\x2\x18\x4\x0\xc\xa\xc\x0\x6\x18\x5\x0\x16\x18\x3\x0\x1e\x18" + "\x1\x0\xb\x18\x1\x0\x1\x18\x2\x0\x7\x18\x48\x0\x39\x18\x1\x18\x1\x18" + "\x2\x18\x7\x18\x5\x0\x7\x18\xa\x18\x1\x0\xc\xa\x2f\x0\x2\x18\x1\x0"
			 + "\x1\x18\x2\x0\x2\x18\x1\x0\x1\x18\x2\x0\x1\x18\x6\x0\x4\x18\x1\x0" + "\x7\x18\x1\x0\x3\x18\x1\x0\x1\x18\x1\x0\x1\x18\x2\x0\x2\x18\x1\x0" + "\x4\x18\x1\x18\x2\x18\xb\x18\x1\x18\x2\x0\x5\x18\x1\x0\x1\x18\x1\x0" + "\x6\x18\x2\x0\xc\xa\x2\x0\x4\x18\x28\x0\x1\x18\x25\x0\xc\xa\x1a\x0"
			 + "\xa\x18\x1\x0\x2c\x18\x21\x0\x5\x18\xa3\x0\x35\x18\x18\x0\x1\x18\xc\xa" + "\x6\x0\x6\x18\x4\x0\x4\x18\x3\x0\x1\x18\x3\x0\x2\x18\x7\x0\x3\x18" + "\x4\x0\xf\x18\xe\x0\x1\x18\x1\x0\xc\xa\x6\x0\x2e\x18\x1\x0\x1\x18" + "\x5\x0\x1\x18\x2\x0\x35\x18\x1\x0\u014d\x18\x1\x0\x4\x18\x2\x0\x7\x18"
			 + "\x1\x0\x1\x18\x1\x0\x4\x18\x2\x0\x33\x18\x1\x0\x4\x18\x2\x0\x29\x18" + "\x1\x0\x4\x18\x2\x0\x7\x18\x1\x0\x1\x18\x1\x0\x4\x18\x2\x0\x11\x18" + "\x1\x0\x47\x18\x1\x0\x4\x18\x2\x0\x67\x18\x2d\x0\x14\x18\x14\x0\x7d\x18" + "\xe\x0\u026c\x18\x2\x0\x15\x18\x1\x0\x20\x18\x5\x0\x71\x18\x19\x0\xf\x18"
			 + "\x1\x0\x4\x18\x10\x0\x16\x18\x10\x0\x16\x18\x10\x0\xf\x18\x1\x0\x3\x18" + "\x11\x0\x40\x18\x2b\x0\x1\x18\x4\x0\x1\x18\x3\x0\xc\xa\x2e\x0\xc\xa" + "\x6\x0\x82\x18\xa\x0\x33\x18\x1\x0\x1\x18\x5\x0\x6a\x18\xc\x0\x23\x18" + "\x33\x0\xc\xa\x24\x18\x2\x0\x5\x18\xd\x0\x36\x18\x19\x0\x7\x18\xa\x0"
			 + "\xc\xa\x2e\x0\x1b\x18\xb\x0\x41\x18\x35\x0\xc\xa\x6\x0\xc\xa\xf\x0" + "\x1\x18\x87\x0\x39\x18\x15\x0\x7\x18\x4\x0\xc\xa\x33\x0\x24\x18\xf\x0" + "\x2\x18\xc\xa\x36\x18\x20\x0\x2c\x18\x22\x0\xc\xa\x3\x0\x3\x18\xc\xa" + "\x2c\x18\x99\x0\x4\x18\x1\x0\x4\x18\x3\x0\x2\x18\xb\x0\x12c\x18\x64\x0"
			 + "\u0116\x18\x2\x0\x6\x18\x2\x0\x2e\x18\x2\x0\x6\x18\x2\x0\xa\x18\x1\x0" + "\x1\x18\x1\x0\x1\x18\x1\x0\x1\x18\x1\x0\x25\x18\x2\x0\x41\x18\x1\x0" + "\x7\x18\x1\x0\x1\x18\x3\x0\x3\x18\x1\x0\x7\x18\x3\x0\x4\x18\x2\x0" + "\x6\x18\x4\x0\xf\x18\x5\x0\x3\x18\x1\x0\x7\x18\x3\x0\xd\x5\x5\x0"
			 + "\x1e\x7\x1\x3\x1\x3\x5\x0\x1\x5\x39\x7\x16\x0\x1\x18\xf\x0\x1\x18" + "\x14\x0\xf\x18\x3\x0\x1a\x7\x72\x0\x1\x18\x4\x0\x1\x18\x2\x0\xc\x18" + "\x1\x0\x1\x18\x3\x0\x5\x18\x6\x0\x1\x18\x1\x0\x1\x18\x1\x0\x1\x18" + "\x1\x0\x4\x18\x1\x0\xd\x18\x2\x0\x4\x18\x5\x0\x5\x18\x4\x0\x1\x18"
			 + "\x40\x0\x2\x18\u0a7b\x0\x39\x18\x1\x0\x39\x18\x1\x0\xcd\x18\x6\x0\x4\x18" + "\x3\x0\x2\x18\xe\x0\x2e\x18\x1\x0\x1\x18\x5\x0\x1\x18\x2\x0\x46\x18" + "\x7\x0\x1\x18\x14\x0\x1b\x18\xb\x0\x7\x18\x1\x0\x7\x18\x1\x0\x7\x18" + "\x1\x0\x7\x18\x1\x0\x7\x18\x1\x0\x7\x18\x1\x0\x7\x18\x1\x0\x7\x18"
			 + "\x75\x0\x1\x7\x1\x18\u01d0\x0\x1\x5\x4\x0\x2\x18\x34\x0\x5\x18\x5\x0" + "\x2\x18\x4\x0\x7e\x18\x6\x0\x3\x18\x1\x0\x84\x18\x1\x0\x4\x18\x5\x0" + "\x33\x18\x3\x0\x88\x18\x15\x0\x21\x18\x41\x0\x14\x18\u0200\x0\u19b6\x18\x70\x0" + "\u51cd\x18\x3f\x0\u048d\x18\x67\x0\x38\x18\x2\x0\u010d\x18\x3\x0\x14\x18\xc\xa"
			 + "\x2\x18\x18\x0\x39\x18\x14\x0\x1f\x18\xa\x0\x6a\x18\x3d\x0\xb\x18\x2\x0" + "\x93\x18\x2\x0\x4\x18\x1\x0\x4\x18\xe\x0\xd\x18\x73\x0\xc\x18\x1\x0" + "\x3\x18\x1\x0\x4\x18\x1\x0\x1b\x18\x23\x0\x40\x18\x10\x0\x3e\x18\x22\x0" + "\xc\xa\x1e\x0\x6\x18\x3\x0\x1\x18\x4\x0\xc\xa\x22\x18\xc\x0\x1b\x18"
			 + "\x1f\x0\x23\x18\x7\x0\x39\x18\x22\x0\x1\x18\xc\xa\x2e\x0\x33\x18\x1b\x0" + "\x3\x18\x1\x0\xa\x18\x4\x0\xc\xa\x6\x0\x1b\x18\x3\x0\x1\x18\x5\x0" + "\x3c\x18\x1\x0\x1\x18\x3\x0\x2\x18\x2\x0\x5\x18\x2\x0\x1\x18\x1\x0" + "\x1\x18\x1e\x0\x3\x18\x2\x0\xd\x18\x7\x0\x3\x18\xe\x0\x6\x18\x2\x0"
			 + "\x6\x18\x2\x0\x6\x18\xb\x0\x7\x18\x1\x0\x7\x18\xdd\x0\x2b\x18\xf\x0" + "\xc\xa\x6\x0\u2ba4\x18\xe\x0\x1b\x18\x4\x0\x3d\x18\u2104\x0\u016e\x18\x2\x0" + "\x98\x18\x2e\x0\x7\x18\xe\x0\x5\x18\x5\x0\x1\x18\x1\x0\xc\x18\x1\x0" + "\xf\x18\x1\x0\x5\x18\x1\x0\x1\x18\x1\x0\x2\x18\x1\x0\x2\x18\x1\x0"
			 + "\x9a\x18\x29\x0\u016b\x18\x16\x0\x64\x18\x2\x0\x42\x18\x32\x0\xe\x18\xa4\x0" + "\x5\x18\x1\x0\xcf\x18\x17\x0\xc\xa\x7\x0\x20\x18\x6\x0\x20\x18\xd\x0" + "\x83\x18\x3\x0\x6\x18\x2\x0\x6\x18\x2\x0\x6\x18\x2\x0\x3\x18\x2b\x0";

		/// <summary>Translates characters to character classes</summary>
		private static readonly char[] ZzCmap = ZzUnpackCMap(ZzCmapPacked);

		/// <summary>Translates DFA states to action switch labels.</summary>
		private static readonly int[] ZzAction = ZzUnpackAction();

		private const string ZzActionPacked0 = "\x1\x0\x1\x1\x3\x2\x1\x3\x4\x4\x1\x5\x3\x4\x2\x5" + "\x1\x4\x2\x5\x1\x3\x1\x5\x1\x4\x3\x5\x2\x0\x5\x4" + "\x2\x5\x3\x4\x2\x0\x1\x5\x3\x0\x2\x5\x1\x0\x2\x5" + "\xa\x0\x1\x6\xc\x0\x2\x5\x1\x0\x2\x5\x16\x0\x2\x5"
			 + "\x3\x0\x3\x4\x1\x0\x2\x4\x1\x5\x1\x0\x1\x5\xb\x0" + "\x1\x7\x1\x0\x1\x4\xa\x0\x1\xa\x1\x4\x1\x0\x1\x4" + "\x2\x0\x4\x4\x1\x0\x6\x4";

		private static int[] ZzUnpackAction()
		{
			int[] result = new int[141];
			int offset = 0;
			offset = ZzUnpackAction(ZzActionPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAction(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>Translates a state to a row index in the transition table</summary>
		private static readonly int[] ZzRowmap = ZzUnpackRowMap();

		private const string ZzRowmapPacked0 = "\x0\x0\x0\x68\x0\xd2\x0\x13a\x0\x68\x0\u0110\x0\u0154\x0\u0198" + "\x0\u01dc\x0\u0220\x0\u0264\x0\u02a8\x0\u02ec\x0\u0330\x0\u0374\x0\u03b8" + "\x0\u03fc\x0\u0440\x0\u0484\x0\u04c8\x0\u050c\x0\u0550\x0\u0594\x0\u05d8"
			 + "\x0\u061c\x0\x68\x0\u0660\x0\u06a4\x0\u06e8\x0\u072c\x0\u0770\x0\u07b4" + "\x0\u07f8\x0\u083c\x0\u0880\x0\u08c4\x0\u0908\x0\u094c\x0\u0990\x0\u09d4" + "\x0\u0a18\x0\u0a5c\x0\u0aa0\x0\u0ae4\x0\u0b28\x0\u0b6c\x0\u0bb0\x0\u0bf4" + "\x0\u0c38\x0\u0c7c\x0\u0cc0\x0\u0d04\x0\u0d48\x0\u0d8c\x0\u0dd0\x0\u0e14"
			 + "\x0\u06a4\x0\u0e58\x0\u0e9c\x0\u0ee0\x0\u0f24\x0\u0f68\x0\u0fac\x0\u0ff0" + "\x0\u1034\x0\u1078\x0\u10bc\x0\u1100\x0\u1144\x0\u1188\x0\u11cc\x0\u1210" + "\x0\u1254\x0\u1298\x0\u12dc\x0\u1320\x0\u1364\x0\u13a8\x0\u13ec\x0\u1430" + "\x0\u1474\x0\u14b8\x0\u14fc\x0\u1540\x0\u1584\x0\u15c8\x0\u160c\x0\u1650"
			 + "\x0\u1694\x0\u16d8\x0\u171c\x0\u1760\x0\u17a4\x0\u17e8\x0\u182c\x0\u1870" + "\x0\u18b4\x0\x13a\x0\u18f8\x0\u193c\x0\u1980\x0\u19c4\x0\u1a08\x0\u1a4c" + "\x0\u1a90\x0\u1ad4\x0\u1b18\x0\u1b5c\x0\u1ba0\x0\u1be4\x0\u1c28\x0\u1c6c" + "\x0\u1cb0\x0\u1cf4\x0\u1980\x0\u1d38\x0\u1d7c\x0\u1dc0\x0\u1e04\x0\u1e48"
			 + "\x0\u1e8c\x0\u1ed0\x0\u1f14\x0\u1f58\x0\x13a\x0\u1f9c\x0\u1fe0\x0\u2024" + "\x0\u2068\x0\u20ac\x0\u1f58\x0\u1188\x0\u20f0\x0\u2134\x0\u2178\x0\u21bc" + "\x0\u2200\x0\u2244\x0\u2288\x0\u22cc\x0\u2310";

		private static int[] ZzUnpackRowMap()
		{
			int[] result = new int[141];
			int offset = 0;
			offset = ZzUnpackRowMap(ZzRowmapPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackRowMap(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int high = packed[i++] << 16;
				result[j++] = high | packed[i++];
			}
			return j;
		}

		/// <summary>The transition table of the DFA</summary>
		private static readonly int[] ZzTrans = ZzUnpackTrans();

		private const string ZzTransPacked0 = "\x1\x2\x1\x3\x1\x4\x1\x5\x1\x4\x1\x6\x1\x7\x1\xa" + "\x1\xb\x1\xa\x1\xc\x1\xd\x1\xe\x1\xf\x1\x10\x1\x11" + "\x1\xd\x1\x11\x1\xc\x1\xa\x1\x14\x1\x15\x1\x11\x1\x16" + "\x2\x17\x1\x14\x2\xc\x1\x18\x3\xc\x1\x19\x2\x17\x1\xc"
			 + "\x1\x1a\x1\x1b\x2\x1e\x1\x1f\x2\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x6" + "\x1\xc\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20\x2\x0\x1\x20"
			 + "\x1\x0\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20\x3\x0\x3\x20" + "\x1\x0\xa\x20\x6\x0\x3\x20\xa\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x3\x0\x1\x4\xcd\x0\x1\x20"
			 + "\x2\x0\x1\x20\x1\x0\x1\x6\x1\x21\x3\x20\x1\x0\x1\x20" + "\x3\x0\x3\x20\x1\x0\xa\x20\x2\x0\x1\x18\x3\x0\x3\x20" + "\xa\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x6\x1\x0\x1\x20\x1\x0\x1\x20"
			 + "\x7\x0\x1\x22\x1\xc\x1\x0\x2\xc\x1\x0\x3\xc\x3\x0" + "\x2\xc\x1\x0\x1\xc\x5\x0\x2\xc\x1\x0\x3\xc\x3\x0" + "\x1\xc\x20\x0\x1\xc\x4\x0\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\x23\x1\xa\x1\x20\x1\xa\x1\xc\x1\x20\x3\xc" + "\x3\x20\x1\xc\x1\xa\x1\x20\x1\xa\x5\x20\x2\xc\x1\x0"
			 + "\x3\xc\x3\x20\x1\xc\x7\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\xc" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\x24\x1\x20\x2\xb\x1\x25\x1\x20\x2\x25\x1\x0"
			 + "\x3\x20\x1\x0\x1\xb\x7\x20\x1\x0\x1\x25\x3\x0\x1\x25" + "\x3\x20\x1\x0\x1\x25\x6\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x7\x0\x2\xc\x1\x0\x2\xc\x1\x0"
			 + "\x3\xc\x3\x0\x2\xc\x1\x0\x1\xc\x5\x0\x2\xc\x1\x0" + "\x3\xc\x3\x0\x1\xc\x20\x0\x1\xc\x4\x0\x1\x20\x2\x0" + "\x1\x20\x1\x0\x1\x20\x1\x21\x1\x20\x1\x28\x1\x20\x1\x0" + "\x1\xd\x1\x29\x1\x2a\x1\x0\x3\xd\x1\x0\x1\xd\x2\x20" + "\x1\xd\x4\x20\x6\x0\x3\x20\x1\x0\x1\x2b\x6\x0\x1\x20"
			 + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x7\x0\x2\xc" + "\x1\x2b\x2\xc\x1\x29\x1\xe\x1\x2c\x1\xc\x3\x29\x1\xc" + "\x1\xe\x1\x0\x1\xc\x1\x29\x4\x0\x2\xc\x1\x0\x3\xc"
			 + "\x3\x0\x1\xc\x1\x2b\x1f\x0\x1\xc\xc\x0\x2\xc\x1\x0" + "\x2\xc\x1\x29\x1\xe\x1\x2d\x1\x10\x3\x29\x2\xc\x1\x0" + "\x1\xc\x1\x29\x4\x0\x2\xc\x1\x0\x3\xc\x3\x0\x1\xc" + "\x15\x0\x2\x2e\x7\x0\x1\xc\x2\x2e\xa\x0\x2\xc\x1\x0" + "\x2\xc\x1\x0\x3\xc\x1\x2f\x2\x0\x2\xc\x1\x0\x1\xc"
			 + "\x5\x0\x2\xc\x1\x0\x3\xc\x3\x0\x1\xc\x20\x0\x1\xc" + "\x4\x0\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21\x1\x20" + "\x1\x28\x1\x20\x1\x0\x1\xd\x1\x29\x1\x2a\x1\x0\x1\x11" + "\x1\xd\x1\x11\x1\x0\x1\xd\x2\x14\x1\x11\x4\x14\x6\x0" + "\x3\x14\x1\x0\x1\x2b\x6\x32\x1\x14\x1\x32\x1\x14\x1\x32"
			 + "\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32" + "\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x20\x1\x0" + "\x1\x14\x1\x32\x1\x14\x1\x32\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20\x3\x0\x1\x14\x1\x20" 
			+ "\x1\x14\x1\x0\x1\x20\x7\x14\x6\x0\x3\x14\x2\x0\x6\x32" + "\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32" + "\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32" + "\x1\x14\x1\x32\x1\x20\x1\x0\x1\x14\x1\x32\x1\x14\x1\x32" 
			+ "\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x23\x1\xa\x1\x20" + "\x1\xa\x1\xc\x1\x20\x3\xc\x1\x14\x1\x20\x1\x14\x1\xc" + "\x1\xa\x1\x14\x1\x15\x5\x14\x2\xc\x1\x0\x3\xc\x3\x14" + "\x1\xc\x1\x0\x6\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14" + "\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x14"
			 + "\x1\x32\x1\x14\x1\x32\x1\x14\x1\x32\x1\x20\x1\xc\x1\x14" + "\x1\x32\x1\x14\x1\x32\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33" + "\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17\x1\x33\x1\x17" + "\x1\x35\x1\x33\x4\x17\x1\x36\x2\x17\x2\x35\x2\x0\x2\x35"
			 + "\x3\x17\x2\x35\x1\x1e\x1\x37\x4\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20" + "\x1\x38\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x33\x2\x0\x1\x33"
			 + "\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17" + "\x1\x33\x1\x17\x1\x35\x1\x33\x7\x17\x2\x35\x2\x0\x2\x35" + "\x3\x17\x2\x35\x6\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17"
			 + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x5\x0\x1\x18\x1b\x0\x1\x18\x28\x0" + "\x1\x18\x5\x0\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34" + "\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17\x1\x33\x1\x17\x1\x35"
			 + "\x1\x33\x7\x17\x2\x35\x2\x0\x2\x35\x1\x39\x2\x17\x2\x35" + "\x3\x1e\x1\x3c\x2\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17"
			 + "\x1\x1e\x1\x17\x1\x1e\x1\x35\x2\x0\x1\x35\x1\x0\x1\x35" + "\x1\x1a\x1\x35\x3\x1a\x1\x35\x2\x1a\x5\x35\x1\x1a\xa\x35" + "\x1\x1a\x2\x0\x1\x35\x1\x1a\x4\x35\x1\x1a\x1e\x35\x1\x0" + "\x1\x38\x5\x35\x2\x0\x1\x35\x1\x0\xc\x35\x1\x1e\x1\x35" 
			+ "\x1\x1e\x2\x35\x4\x1e\x1\x37\x2\x1e\x2\x35\x2\x0\x2\x35" + "\x3\x1e\x2\x35\x1\x1e\x1\x37\x1a\x1e\x1\x0\x1\x38\x4\x1e" + "\x1\x35\x2\x0\x1\x35\x1\x0\xc\x35\x1\x1e\x1\x35\x1\x1e" + "\x2\x35\x7\x1e\x2\x35\x2\x0\x2\x35\x3\x1e\x2\x35\x1e\x1e"
			 + "\x1\x0\x1\x38\x4\x1e\x1\x35\x2\x0\x1\x35\x1\x0\xc\x35" + "\x1\x1e\x1\x35\x1\x1e\x2\x35\x7\x1e\x2\x35\x2\x0\x2\x35" + "\x1\x3c\x2\x1e\x2\x35\x3\x1e\x1\x3c\x18\x1e\x1\x0\x1\x38" + "\x4\x1e\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x0\x3\x20" + 
			"\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0\xa\x20\x6\x0\x3\x20" + "\xa\x0\x1\x3d\x1\x3e\x1\x3f\x1\x40\x1\x20\x1\x0\x1\x41" + "\x1\x42\x1\x43\x1\x46\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x7\x0\x1\x47\x1\xc\x1\x0\x2\xc\x1\x0\x3\xc\x3\x0"
			 + "\x2\xc\x1\x0\x1\xc\x5\x0\x2\xc\x1\x0\x3\xc\x3\x0" + "\x1\xc\x20\x0\x1\xc\x4\x0\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\xc\x1\xa\x1\x20\x1\xa\x1\xc\x1\x20\x3\xc" + "\x3\x20\x1\xc\x1\xa\x1\x20\x1\xa\x5\x20\x2\xc\x1\x0" + "\x3\xc\x3\x20\x1\xc\x7\x0\x1\x3d\x1\x3e\x1\x3f\x1\x40"
			 + "\x1\x20\x1\x0\x1\x41\x1\x42\x1\x43\x1\x46\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\xc" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\x25\x1\x20\x2\xb\x1\x25\x1\x20\x2\x25\x1\x0" + "\x3\x20\x1\x0\x1\xb\x7\x20\x1\x0\x1\x25\x3\x0\x1\x25"
			 + "\x3\x20\x1\x0\x1\x25\x6\x0\x1\x3d\x1\x3e\x1\x3f\x1\x40" + "\x1\x20\x1\x0\x1\x41\x1\x42\x1\x43\x1\x46\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x7\x0\x1\x25\x1\x0\x3\x25\x1\x0" + "\x2\x25\x5\x0\x1\x25\xa\x0\x1\x25\x3\x0\x1\x25\x4\x0"
			 + "\x1\x25\x24\x0\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21" + "\x1\x20\x1\x28\x1\x20\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0" + "\xa\x20\x6\x0\x3\x20\x1\x0\x1\x2b\x6\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0"
			 + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\xb\x0\x1\x2b\x2\x0" + "\x2\x29\x1\x2a\x1\x0\x3\x29\x1\x0\x1\x29\x2\x0\x1\x29" + "\x10\x0\x1\x2b\x2e\x0\x1\x2b\x4\x0\x1\x2a\x1b\x0\x1\x2b" + "\x2e\x0\x1\x2b\x22\x0\x1\x2b\x2c\x0\x2\xc\x1\x2b\x2\xc" + "\x1\x0\x1\xc\x1\x2c\x1\xc\x3\x0\x2\xc\x1\x0\x1\xc"
			 + "\x5\x0\x2\xc\x1\x0\x3\xc\x3\x0\x1\xc\x1\x2b\x1f\x0" + "\x1\xc\xc\x0\x2\xc\x1\x0\x2\xc\x1\x29\x1\xe\x1\x2d" + "\x1\x10\x3\x29\x2\xc\x1\x0\x1\xc\x1\x29\x4\x0\x2\xc" + "\x1\x0\x3\xc\x3\x0\x1\xc\x20\x0\x1\xc\x48\x0\x2\x48" + "\x22\x0\x1\x49\x66\x0\x1\x32\x1\x0\x1\x32\x2\x0\x7\x32"
			 + "\x6\x0\x3\x32\x2\x0\x1e\x32\x2\x0\x4\x32\x1\x33\x2\x0" + "\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35" + "\x3\x33\x1\x35\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33\xa\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" 
			+ "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x35\x3\x33\x1\x35" + "\x1\x33\x3\x35\x3\x33\x1\x35\xa\x33\x2\x35\x2\x0\x2\x35"
			 + "\x3\x33\xa\x35\x1\x4a\x1\x4b\x1\x4c\x1\x4d\x1\x33\x1\x35" + "\x1\x64\x1\x65\x1\x66\x1\x67\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33\x1\x35" + "\x1\x33\x2\x35\x2\x0\x1\x35\x1\x0\x1e\x35\x2\x0\x25\x35"
			 + "\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33" + "\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17\x1\x33\x1\x17" + "\x1\x35\x1\x33\x4\x17\x1\x68\x2\x17\x2\x35\x2\x0\x2\x35" + "\x3\x17\x2\x35\x1\x1e\x1\x69\x4\x1e\x1\x17\x1\x1e\x1\x17"
			 + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17" + "\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20" + "\x1\x38\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x35\x2\x0\x1\x35" + "\x1\x0\xc\x35\x1\x1e\x1\x35\x1\x1e\x2\x35\x4\x1e\x1\x69"
			 + "\x2\x1e\x2\x35\x2\x0\x2\x35\x3\x1e\x2\x35\x1\x1e\x1\x69" + "\x1a\x1e\x1\x0\x1\x38\x4\x1e\x1\x6a\x2\x0\x1\x6a\x1\x0" + "\x1\x6a\x1\x35\x1a\x6a\x2\x0\x25\x6a\x1\x0\x5\x6a\x1\x33" + "\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33" 
			+ "\x3\x35\x1\x17\x1\x33\x1\x17\x1\x35\x1\x33\x7\x17\x2\x35" + "\x2\x0\x2\x35\x1\x6b\x2\x17\x2\x35\x3\x1e\x1\x6e\x2\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e"
			 + "\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x35\x2\x0\x1\x35\x1\x0\xc\x35\x1\x1e\x1\x35\x1\x1e" + "\x2\x35\x7\x1e\x2\x35\x2\x0\x2\x35\x1\x6e\x2\x1e\x2\x35" + "\x3\x1e\x1\x6e\x18\x1e\x1\x0\x1\x38\x4\x1e\x1\x20\x2\x0"
			 + "\x1\x20\x1\x0\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20\x3\x0" + "\x3\x20\x1\x0\xa\x20\x6\x0\x3\x20\xa\x0\x1\x20\x1\x0" + "\x1\x6f\x1\x70\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x39\x0\x2\x70\x18\x0"
			 + "\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21\x3\x20\x1\x0" + "\x1\x20\x3\x0\x3\x20\x1\x0\xa\x20\x6\x0\x3\x20\xa\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x71\x1\x72\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x43\x0"
			 + "\x2\x72\xe\x0\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21" + "\x3\x20\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0\xa\x20\x6\x0" + "\x3\x20\xa\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x73\x1\x74\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0"
			 + "\x1\x20\x41\x0\x2\x74\x10\x0\x1\x20\x2\x0\x1\x20\x1\x0" + "\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0" + "\xa\x20\x6\x0\x3\x20\xa\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x75\x1\x78\x1\x20\x1\x0\x1\x20\x1\x0"
			 + "\x1\x20\x1\x0\x1\x20\x49\x0\x2\x78\x70\x0\x2\x79\x15\x0" + "\x1\x7a\x3e\x0\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34" + "\x3\x33\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35\xa\x33\x2\x35" + "\x2\x0\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35\x1\x7b\x1\x7c"
			 + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x20\x1\x38" + "\x1\x33\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35\x1\x0\x1e\x35" + "\x2\x0\x11\x35\x2\x7c\x10\x35\x1\x0\x1\x38\x4\x35\x1\x33"
			 + "\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33" + "\x3\x35\x3\x33\x1\x35\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33" + "\xa\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x33\x1\x35\x1\x7d\x1\x7e\x1\x33\x1\x35\x1\x33"
			 + "\x1\x35\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33" + "\x2\x35\x2\x0\x1\x35\x1\x0\x1e\x35\x2\x0\x1b\x35\x2\x7e" + "\x6\x35\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0" + "\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35"
			 + "\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x7f\x1\x82" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35"
			 + "\x1\x0\x1e\x35\x2\x0\x19\x35\x2\x82\xa\x35\x1\x0\x1\x38" + "\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33" + "\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35\xa\x33\x2\x35\x2\x0" + "\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33"
			 + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x83\x1\x84\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33" + "\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35\x1\x0\x1e\x35\x2\x0" + "\x21\x35\x2\x84\x2\x35\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0"
			 + "\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35" + "\x1\x17\x1\x33\x1\x17\x1\x35\x1\x33\x5\x17\x1\x85\x1\x17" + "\x2\x35\x2\x0\x2\x35\x3\x17\x2\x35\x2\x1e\x1\x86\x3\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e"
			 + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x35\x2\x0\x1\x35\x1\x0\xc\x35\x1\x1e\x1\x35\x1\x1e" + "\x2\x35\x5\x1e\x1\x86\x1\x1e\x2\x35\x2\x0\x2\x35\x3\x1e"
			 + "\x2\x35\x2\x1e\x1\x86\x19\x1e\x1\x0\x1\x38\x4\x1e\x1\x6a" + "\x2\x0\x1\x6a\x1\x0\x1\x6a\x1\x87\x1a\x6a\x2\x0\x25\x6a" + "\x1\x0\x5\x6a\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x88" + "\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17\x1\x33\x1\x17\x1\x35"
			 + "\x1\x33\x7\x17\x2\x35\x2\x0\x2\x35\x3\x17\x2\x35\x6\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17\x1\x1e\x1\x17\x1\x1e"
			 + "\x1\x35\x2\x0\x1\x35\x1\x0\x1\x35\x1\x89\xa\x35\x1\x1e" + "\x1\x35\x1\x1e\x2\x35\x7\x1e\x2\x35\x2\x0\x2\x35\x3\x1e" + "\x2\x35\x1e\x1e\x1\x0\x1\x38\x4\x1e\x1\x20\x2\x0\x1\x20" + "\x1\x0\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20\x3\x0\x3\x20" + 
			"\x1\x0\xa\x20\x6\x0\x3\x20\xa\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x8c\x1\x8d\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x3d\x0\x2\x8d\x16\x0\x1\x20" + "\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21\x3\x20\x1\x0\x1\x20"
			 + "\x3\x0\x3\x20\x1\x0\xa\x20\x6\x0\x3\x20\xa\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x8c\x1\x8d\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x47\x0\x2\x8d" + "\xc\x0\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21\x3\x20"
			 + "\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0\x5\x20\x1\x8c\x2\x20" + "\x6\x0\x3\x20\x3\x0\x1\x8d\x4\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1f\x0\x1\x8d\x10\x0\x1\x8d"
			 + "\x22\x0\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21\x3\x20" + "\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0\xa\x20\x6\x0\x3\x20" + "\xa\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20" + "\x1\x0\x1\x8c\x1\x8d\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20"
			 + "\x4b\x0\x2\x8d\x17\x0\x1\x8e\x6b\x0\x1\x8f\x3e\x0\x1\x33" + "\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33" + "\x3\x35\x3\x33\x1\x35\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33" + "\xa\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x90\x1\x91\x1\x33"
			 + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33" + "\x2\x35\x2\x0\x1\x35\x1\x0\x1e\x35\x2\x0\x15\x35\x2\x91" + "\xe\x35\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0"
			 + "\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35" + "\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x90\x1\x91\x1\x33\x1\x35\x1\x33\x1\x35"
			 + "\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35" + "\x1\x0\x1e\x35\x2\x0\x1f\x35\x2\x91\x4\x35\x1\x0\x1\x38" + "\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33" + "\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35\x5\x33\x1\x90\x2\x33"
			 + "\x2\x35\x2\x0\x2\x35\x3\x33\x3\x35\x1\x91\x4\x35\x1\x33" + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33\x2\x35\x2\x0"
			 + "\x1\x35\x1\x0\x17\x35\x1\x91\x4\x35\x2\x0\xa\x35\x1\x91" + "\x1a\x35\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0\x1\x33\x1\x0" + "\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x3\x33\x1\x35" + "\xa\x33\x2\x35\x2\x0\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35"
			 + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35" + "\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x90\x1\x91" + "\x1\x20\x1\x38\x1\x33\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35" + "\x1\x0\x1e\x35\x2\x0\x23\x35\x2\x91\x1\x0\x1\x38\x4\x35"
			 + "\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35" + "\x1\x33\x3\x35\x1\x17\x1\x33\x1\x17\x1\x35\x1\x33\x6\x17" + "\x1\x92\x1\x93\x1\x35\x2\x0\x2\x35\x2\x17\x1\x92\x2\x35" + "\x5\x1e\x1\x96\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e"
			 + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20\x1\x38\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x35\x2\x0\x1\x35\x1\x0\xc\x35\x1\x1e" + "\x1\x35\x1\x1e\x2\x35\x6\x1e\x1\x96\x1\x93\x1\x35\x2\x0"
			 + "\x2\x35\x2\x1e\x1\x96\x2\x35\x5\x1e\x1\x96\x16\x1e\x1\x0" + "\x1\x38\x4\x1e\x1\x6a\x2\x0\x1\x6a\x1\x0\x1\x6a\x1\x35" + "\x14\x6a\x3\x97\x3\x6a\x2\x0\x2\x6a\x3\x97\x2\x6a\x1e\x97" + "\x1\x0\x1\x6a\x4\x97\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98"
			 + "\x1\x35\x1a\x98\x2\x0\x2\x35\xd\x98\x2\x99\x2\x9a\x2\x98" + "\x2\x9b\x2\x9c\xa\x98\x1\x9d\x1\xa0\x5\x98\x2\x0\x1\x98" + "\x1\x0\x1\x98\x1\x35\x1a\x98\x2\x0\x2\x35\x23\x98\x1\x9d" + "\x1\xa0\x4\x98\x1\x20\x2\x0\x1\x20\x1\x0\x1\x20\x1\x21"
			 + "\x3\x20\x1\x0\x1\x20\x3\x0\x3\x20\x1\x0\xa\x20\x1\x0" + "\x1\xa1\x4\x0\x3\x20\xa\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0\x1\x20\x1\x0" + "\x1\x20\x1\x0\x1\x20\x23\x0\x1\xa1\x47\x0\x1\xa2\x3d\x0"
			 + "\x1\x33\x2\x0\x1\x33\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35" + "\x1\x33\x3\x35\x3\x33\x1\x35\xa\x33\x1\x35\x1\xa1\x2\x0" + "\x2\x35\x3\x33\xa\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33" + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x33"
			 + "\x1\x35\x1\x33\x1\x35\x1\x33\x1\x35\x1\x20\x1\x38\x1\x33" + "\x1\x35\x1\x33\x2\x35\x2\x0\x1\x35\x1\x0\x1b\x35\x1\xa1" + "\x2\x0\x25\x35\x1\x0\x1\x38\x4\x35\x1\x33\x2\x0\x1\x33" + "\x1\x0\x1\x33\x1\x34\x3\x33\x1\x35\x1\x33\x3\x35\x1\x17"
			 + "\x1\x33\x1\x17\x1\x35\x1\x33\x7\x17\x1\x93\x1\x35\x2\x0" + "\x2\x35\x3\x17\x2\x35\x6\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e" + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x20\x1\x38"
			 + "\x1\x17\x1\x1e\x1\x17\x1\x1e\x1\x35\x2\x0\x1\x35\x1\x0" + "\x1b\x35\x1\xa3\x2\x0\x25\x35\x1\x0\x1\x38\x5\x35\x2\x0" + "\x1\x35\x1\x0\xc\x35\x1\x1e\x1\x35\x1\x1e\x2\x35\x7\x1e" + "\x1\x93\x1\x35\x2\x0\x2\x35\x3\x1e\x2\x35\x1e\x1e\x1\x0" 
			+ "\x1\x38\x4\x1e\x1\x6a\x2\x0\x1\x6a\x1\x0\x1\x6a\x1\x87" + "\x14\x6a\x3\xa4\x3\x6a\x2\x0\x2\x6a\x3\xa4\x2\x6a\x1e\xa4" + "\x1\x0\x1\x6a\x4\xa4\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98" + "\x1\xa5\x1a\x98\x2\x0\x2\x35\x23\x98\x1\x9d\x1\xa0\x5\x98"
			 + "\x2\x0\x1\x98\x1\x0\x1\x98\x1\xa5\x1a\x98\x2\x0\x2\x35" + "\xf\x98\x2\xa6\x10\x98\x1\x9d\x1\xa0\x5\x98\x2\x0\x1\x98" + "\x1\x0\x1\x98\x1\xa5\x1a\x98\x2\x0\x2\x35\x19\x98\x2\xa7" + "\x6\x98\x1\x9d\x1\xa0\x5\x98\x2\x0\x1\x98\x1\x0\x1\x98"
			 + "\x1\xa5\x1a\x98\x2\x0\x2\x35\x17\x98\x2\xaa\xa\x98\x1\x9d" + "\x1\xa0\x5\x98\x2\x0\x1\x98\x1\x0\x1\x98\x1\xa5\x1a\x98" + "\x2\x0\x2\x35\x1f\x98\x2\xab\x2\x98\x1\x9d\x1\xa0\x4\x98" + "\x1\x9d\x2\x0\x1\x9d\x1\x0\x1\x9d\x1\xac\x1a\x9d\x4\x0"
			 + "\x2b\x9d\x1\xad\x2\x0\x1\xad\x1\x0\x1\xad\x1\xa5\x1a\xad" + "\x2\x0\x2\x6a\x23\xad\x1\x9d\x5\xad\x1\xae\x2\x0\x1\xae" + "\x1\x0\x1e\xae\x2\x0\x2d\xae\xf\x0\x1\xaf\x42\x0\x1\x6a" + "\x2\x0\x1\x6a\x1\x0\x1\x6a\x1\x87\x14\x6a\x3\xb0\x3\x6a"
			 + "\x2\x0\x2\x6a\x3\xb0\x2\x6a\x1e\xb0\x1\x0\x1\x6a\x4\xb0" + "\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98\x1\x35\x14\x98\x3\xb1" + "\x3\x98\x2\x0\x2\x35\x3\xb1\x2\x98\x1e\xb1\x1\x9d\x1\xa0" + "\x4\xb1\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98\x1\xa5\x1a\x98"
			 + "\x2\x0\x2\x35\x11\x98\x2\xc8\xe\x98\x1\x9d\x1\xa0\x5\x98" + "\x2\x0\x1\x98\x1\x0\x1\x98\x1\xa5\x1a\x98\x2\x0\x2\x35" + "\x1b\x98\x2\xc8\x4\x98\x1\x9d\x1\xa0\x5\x98\x2\x0\x1\x98" + "\x1\x0\x1\x98\x1\xa5\x15\x98\x1\xc8\x4\x98\x2\x0\x2\x35"
			 + "\x6\x98\x1\xc8\x1a\x98\x1\x9d\x1\xa0\x5\x98\x2\x0\x1\x98" + "\x1\x0\x1\x98\x1\xa5\x1a\x98\x2\x0\x2\x35\x21\x98\x2\xc8" + "\x1\x9d\x1\xa0\x4\x98\x1\x9d\x2\x0\x1\x9d\x1\x0\x1\x9d" + "\x1\x0\x14\x9d\x3\xc9\x3\x9d\x4\x0\x3\xc9\x2\x9d\x1e\xc9"
			 + "\x2\x9d\x4\xc9\x1\xad\x2\x0\x1\xad\x1\x0\x1\xad\x1\xca" + "\x1a\xad\x2\x0\x2\x6a\x23\xad\x1\x9d\x5\xad\x1\xcb\x2\x0" + "\x1\xcb\x1\x0\x1\xcb\x1\xae\x6\xcb\x1\xae\x11\xcb\x2\x0" + "\x2\xae\x2b\xcb\x1\x6a\x2\x0\x1\x6a\x1\x0\x1\x6a\x1\x87"
			 + "\x14\x6a\x3\xcc\x3\x6a\x2\x0\x2\x6a\x3\xcc\x2\x6a\x1e\xcc" + "\x1\x0\x1\x6a\x4\xcc\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98" + "\x1\xa5\x14\x98\x3\xcd\x3\x98\x2\x0\x2\x35\x3\xcd\x2\x98" + "\x1e\xcd\x1\x9d\x1\xa0\x4\xcd\x1\x98\x2\x0\x1\x98\x1\x0"
			 + "\x1\x98\x1\xa5\x19\x98\x1\xa1\x2\x0\x2\x35\x23\x98\x1\x9d" + "\x1\xa0\x4\x98\x1\x9d\x2\x0\x1\x9d\x1\x0\x1\x9d\x1\xac" + "\x14\x9d\x3\xce\x3\x9d\x4\x0\x3\xce\x2\x9d\x1e\xce\x2\x9d" + "\x4\xce\x1\xad\x2\x0\x1\xad\x1\x0\x1\xad\x1\x35\x14\xad"
			 + "\x3\xcf\x3\xad\x2\x0\x2\x6a\x3\xcf\x2\xad\x1e\xcf\x1\x9d" + "\x1\xad\x4\xcf\x1\x98\x2\x0\x1\x98\x1\x0\x1\x98\x1\xa5" + "\x14\x98\x3\xd2\x2\x98\x1\xa1\x2\x0\x2\x35\x3\xd2\x2\x98" + "\x1e\xd2\x1\x9d\x1\xa0\x4\xd2\x1\x9d\x2\x0\x1\x9d\x1\x0"
			 + "\x1\x9d\x1\xac\x14\x9d\x3\xd3\x2\x9d\x1\xa1\x4\x0\x3\xd3" + "\x2\x9d\x1e\xd3\x2\x9d\x4\xd3\x1\xad\x2\x0\x1\xad\x1\x0" + "\x1\xad\x1\xca\x14\xad\x3\xd4\x3\xad\x2\x0\x2\x6a\x3\xd4" + "\x2\xad\x1e\xd4\x1\x9d\x1\xad\x4\xd4\x1\x98\x2\x0\x1\x98"
			 + "\x1\x0\x1\x98\x1\xa5\x14\x98\x3\xc8\x2\x98\x1\xa1\x2\x0" + "\x2\x35\x3\xc8\x2\x98\x1e\xc8\x1\x9d\x1\xa0\x4\xc8\x1\x9d" + "\x2\x0\x1\x9d\x1\x0\x1\x9d\x1\xac\x14\x9d\x3\xd5\x2\x9d" + "\x1\xa1\x4\x0\x3\xd5\x2\x9d\x1e\xd5\x2\x9d\x4\xd5\x1\xad"
			 + "\x2\x0\x1\xad\x1\x0\x1\xad\x1\xca\x14\xad\x3\xd6\x2\xad" + "\x1\xa1\x2\x0\x2\x6a\x3\xd6\x2\xad\x1e\xd6\x1\x9d\x1\xad" + "\x4\xd6\x1\x9d\x2\x0\x1\x9d\x1\x0\x1\x9d\x1\xac\x19\x9d" + "\x1\xa1\x4\x0\x2b\x9d\x1\xad\x2\x0\x1\xad\x1\x0\x1\xad"
			 + "\x1\xca\x14\xad\x3\xd7\x2\xad\x1\xa1\x2\x0\x2\x6a\x3\xd7" + "\x2\xad\x1e\xd7\x1\x9d\x1\xad\x4\xd7\x1\xad\x2\x0\x1\xad" + "\x1\x0\x1\xad\x1\xca\x19\xad\x1\xa1\x2\x0\x2\x6a\x23\xad" + "\x1\x9d\x5\xad";

		private static int[] ZzUnpackTrans()
		{
			int[] result = new int[9044];
			int offset = 0;
			offset = ZzUnpackTrans(ZzTransPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackTrans(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				value--;
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		private const int ZzUnknownError = 0;

		private const int ZzNoMatch = 1;

		private const int ZzPushback2big = 2;

		private static readonly string[] ZzErrorMsg = new string[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

		/// <summary>ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code></summary>
		private static readonly int[] ZzAttribute = ZzUnpackAttribute();

		private const string ZzAttributePacked0 = "\x1\x0\x2\x1\x1\xb\x19\x1\x2\x0\xc\x1\x2\x0\x1\x1" + "\x3\x0\x2\x1\x1\x0\x2\x1\xa\x0\x1\x1\xc\x0\x2\x1" + "\x1\x0\x2\x1\x16\x0\x2\x1\x3\x0\x2\x1\x1\xb\x1\x0" + "\x3\x1\x1\x0\x1\x1\xb\x0\x1\x1\x1\x0\x1\x1\xa\x0"
			 + "\x1\xb\x1\x1\x1\x0\x1\x1\x2\x0\x4\x1\x1\x0\x6\x1";

		/* error codes */
		/* error messages for the codes above */
		private static int[] ZzUnpackAttribute()
		{
			int[] result = new int[141];
			int offset = 0;
			offset = ZzUnpackAttribute(ZzAttributePacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAttribute(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>the input device</summary>
		private Reader zzReader;

		/// <summary>the current state of the DFA</summary>
		private int zzState;

		/// <summary>the current lexical state</summary>
		private int zzLexicalState = Yyinitial;

		/// <summary>
		/// this buffer contains the current text to be matched and is
		/// the source of the yytext() string
		/// </summary>
		private char[] zzBuffer = new char[ZzBuffersize];

		/// <summary>the textposition at the last accepting state</summary>
		private int zzMarkedPos;

		/// <summary>the current text position in the buffer</summary>
		private int zzCurrentPos;

		/// <summary>startRead marks the beginning of the yytext() string in the buffer</summary>
		private int zzStartRead;

		/// <summary>
		/// endRead marks the last character in the buffer, that has been read
		/// from input
		/// </summary>
		private int zzEndRead;

		/// <summary>number of newlines encountered up to the start of the matched text</summary>
		private int yyline;

		/// <summary>the number of characters up to the start of the matched text</summary>
		private int yychar;

		/// <summary>
		/// the number of characters from the last newline up to the start of the
		/// matched text
		/// </summary>
		private int yycolumn;

		/// <summary>zzAtBOL == true <=> the scanner is currently at the beginning of a line</summary>
		private bool zzAtBOL = true;

		/// <summary>zzAtEOF == true <=> the scanner is at the EOF</summary>
		private bool zzAtEOF;

		/// <summary>denotes if the user-EOF-code has already been executed</summary>
		private bool zzEOFDone;

		private ILexedTokenFactory<object> tokenFactory;

		private bool invertible;

		private bool normArDigits;

		private bool normArPunc;

		private bool tokenizeNLs;

		public const string NewlineToken = "*NL*";

		private bool useUTF8Ellipsis;

		private bool normAlif;

		private bool normYa;

		private bool removeDiacritics;

		private bool removeTatweel;

		private bool removeQuranChars;

		private bool removeProMarker;

		private bool removeSegMarker;

		private bool removeMorphMarker;

		private bool removeLengthening;

		private readonly Pattern segmentationMarker = Pattern.Compile("^-+|-+$");

		private bool atbEscaping;

		private IDictionary<string, string> normMap;

		public ArabicLexer(Reader r, ILexedTokenFactory<object> tf, Properties props)
			: this(r)
		{
			/* user code: */
			// Convert Arabic digits to ASCII digits
			// Convert Arabic punctuation to ASCII equivalents
			// Substitute newlines with newlineChar.
			// Otherwise, treat them like whitespace
			// Use \u2026 for ellipses
			// Arabic-specific orthographic normalization rules
			// Penn ATB vocalized section normalizations
			// Lengthening effects (yAAAAAAA): replace three or more of the same character with one
			// Escape parens for ATB parsing
			this.tokenFactory = tf;
			tokenizeNLs = PropertiesUtils.GetBool(props, "tokenizeNLs", false);
			useUTF8Ellipsis = PropertiesUtils.GetBool(props, "useUTF8Ellipsis", false);
			invertible = PropertiesUtils.GetBool(props, "invertible", false);
			normArDigits = PropertiesUtils.GetBool(props, "normArDigits", false);
			normArPunc = PropertiesUtils.GetBool(props, "normArPunc", false);
			normAlif = PropertiesUtils.GetBool(props, "normAlif", false);
			normYa = PropertiesUtils.GetBool(props, "normYa", false);
			removeDiacritics = PropertiesUtils.GetBool(props, "removeDiacritics", false);
			removeTatweel = PropertiesUtils.GetBool(props, "removeTatweel", false);
			removeQuranChars = PropertiesUtils.GetBool(props, "removeQuranChars", false);
			removeProMarker = PropertiesUtils.GetBool(props, "removeProMarker", false);
			removeSegMarker = PropertiesUtils.GetBool(props, "removeSegMarker", false);
			removeMorphMarker = PropertiesUtils.GetBool(props, "removeMorphMarker", false);
			removeLengthening = PropertiesUtils.GetBool(props, "removeLengthening", false);
			atbEscaping = PropertiesUtils.GetBool(props, "atbEscaping", false);
			SetupNormalizationMap();
		}

		private void SetupNormalizationMap()
		{
			normMap = Generics.NewHashMap(200);
			// Junk characters that we always remove
			normMap["\u0600"] = "#";
			normMap["\u0601"] = string.Empty;
			normMap["\u0602"] = string.Empty;
			normMap["\u0603"] = string.Empty;
			normMap["\u0606"] = "\u221B";
			normMap["\u0607"] = "\u221C";
			normMap["\u0608"] = string.Empty;
			normMap["\u0609"] = "%";
			normMap["\u060A"] = "%";
			normMap["\u060B"] = string.Empty;
			normMap["\u060E"] = string.Empty;
			normMap["\u060F"] = string.Empty;
			normMap["\u066E"] = "\u0628";
			normMap["\u066F"] = "\u0642";
			normMap["\u06CC"] = "\u0649";
			normMap["\u06D6"] = string.Empty;
			normMap["\u06D7"] = string.Empty;
			normMap["\u06D8"] = string.Empty;
			normMap["\u06D9"] = string.Empty;
			normMap["\u06DA"] = string.Empty;
			normMap["\u06DB"] = string.Empty;
			normMap["\u06DC"] = string.Empty;
			normMap["\u06DD"] = string.Empty;
			normMap["\u06DE"] = string.Empty;
			normMap["\u06DF"] = string.Empty;
			normMap["\u06E0"] = string.Empty;
			normMap["\u06E1"] = string.Empty;
			normMap["\u06E2"] = string.Empty;
			normMap["\u06E3"] = string.Empty;
			normMap["\u06E4"] = string.Empty;
			normMap["\u06E5"] = string.Empty;
			normMap["\u06E6"] = string.Empty;
			normMap["\u06E7"] = string.Empty;
			normMap["\u06E8"] = string.Empty;
			normMap["\u06E9"] = string.Empty;
			normMap["\u06EA"] = string.Empty;
			normMap["\u06EB"] = string.Empty;
			normMap["\u06EC"] = string.Empty;
			normMap["\u06ED"] = string.Empty;
			if (normArDigits)
			{
				normMap["\u0660"] = "0";
				normMap["\u0661"] = "1";
				normMap["\u0662"] = "2";
				normMap["\u0663"] = "3";
				normMap["\u0664"] = "4";
				normMap["\u0665"] = "5";
				normMap["\u0666"] = "6";
				normMap["\u0667"] = "7";
				normMap["\u0668"] = "8";
				normMap["\u0669"] = "9";
				normMap["\u06F0"] = "0";
				normMap["\u06F1"] = "1";
				normMap["\u06F2"] = "2";
				normMap["\u06F3"] = "3";
				normMap["\u06F4"] = "4";
				normMap["\u06F5"] = "5";
				normMap["\u06F6"] = "6";
				normMap["\u06F7"] = "7";
				normMap["\u06F8"] = "8";
				normMap["\u06F9"] = "9";
			}
			if (normArPunc)
			{
				normMap["\u00BB"] = "\"";
				normMap["\u00AB"] = "\"";
				normMap["\u060C"] = ",";
				normMap["\u060D"] = ",";
				normMap["\u061B"] = ";";
				normMap["\u061E"] = ".";
				normMap["\u061F"] = "?";
				normMap["\u066A"] = "%";
				normMap["\u066B"] = ",";
				normMap["\u066C"] = "\u0027";
				normMap["\u066F"] = "*";
				normMap["\u06DF"] = ".";
			}
			if (normAlif)
			{
				normMap["\u0622"] = "\u0627";
				normMap["\u0623"] = "\u0627";
				normMap["\u0625"] = "\u0627";
				normMap["\u0671"] = "\u0627";
				normMap["\u0672"] = "\u0627";
				normMap["\u0673"] = "\u0627";
			}
			if (normYa)
			{
				normMap["\u064A"] = "\u0649";
			}
			if (removeDiacritics)
			{
				normMap["\u064B"] = string.Empty;
				normMap["\u064C"] = string.Empty;
				normMap["\u064D"] = string.Empty;
				normMap["\u064E"] = string.Empty;
				normMap["\u064F"] = string.Empty;
				normMap["\u0650"] = string.Empty;
				normMap["\u0651"] = string.Empty;
				normMap["\u0652"] = string.Empty;
				normMap["\u0653"] = string.Empty;
				normMap["\u0654"] = string.Empty;
				normMap["\u0655"] = string.Empty;
				normMap["\u0656"] = string.Empty;
				normMap["\u0657"] = string.Empty;
				normMap["\u0658"] = string.Empty;
				normMap["\u0659"] = string.Empty;
				normMap["\u065A"] = string.Empty;
				normMap["\u065B"] = string.Empty;
				normMap["\u065C"] = string.Empty;
				normMap["\u065D"] = string.Empty;
				normMap["\u065E"] = string.Empty;
				normMap["\u0670"] = string.Empty;
			}
			if (removeTatweel)
			{
				normMap["\u0640"] = string.Empty;
				normMap["_"] = string.Empty;
			}
			if (removeQuranChars)
			{
				// Arabic honorifics
				normMap["\u0610"] = string.Empty;
				normMap["\u0611"] = string.Empty;
				normMap["\u0612"] = string.Empty;
				normMap["\u0613"] = string.Empty;
				normMap["\u0614"] = string.Empty;
				normMap["\u0615"] = string.Empty;
				normMap["\u0616"] = string.Empty;
				normMap["\u0617"] = string.Empty;
				normMap["\u0618"] = string.Empty;
				normMap["\u0619"] = string.Empty;
				normMap["\u061A"] = string.Empty;
			}
			if (atbEscaping)
			{
				normMap["("] = "-LRB-";
				normMap[")"] = "-RRB-";
			}
		}

		private string NormalizeToken(string text, bool isWord)
		{
			// Remove segmentation markers from the ATB
			if (isWord && removeSegMarker)
			{
				text = segmentationMarker.Matcher(text).ReplaceAll(string.Empty);
			}
			int len = text.Length;
			StringBuilder sb = new StringBuilder(len);
			for (int i = 0; i < len; ++i)
			{
				string thisChar = text[i].ToString();
				// Remove morpheme markers from the ATB vocalized section
				if (isWord && removeMorphMarker && thisChar.Equals("+"))
				{
					continue;
				}
				if (removeLengthening && IsLengthening(text, i))
				{
					continue;
				}
				if (normMap.Contains(thisChar))
				{
					thisChar = normMap[thisChar];
				}
				if (thisChar.Length > 0)
				{
					sb.Append(thisChar);
				}
			}
			return sb.ToString();
		}

		private bool IsLengthening(string text, int pos)
		{
			if (pos == 0)
			{
				return false;
			}
			string thisChar = text[pos].ToString();
			if (!thisChar.Equals(text[pos - 1].ToString()))
			{
				return false;
			}
			if (pos < text.Length - 1 && thisChar.Equals(text[pos + 1].ToString()))
			{
				return true;
			}
			if (pos >= 2 && thisChar.Equals(text[pos - 2].ToString()))
			{
				return true;
			}
			return false;
		}

		/// <summary>Make the next token.</summary>
		/// <param name="txt">What the token should be</param>
		/// <param name="originalText">The original String that got transformed into txt</param>
		private object GetNext(string txt, string originalText)
		{
			if (tokenFactory == null)
			{
				throw new Exception(this.GetType().FullName + ": Token factory is null.");
			}
			if (invertible)
			{
				//String str = prevWordAfter.toString();
				//prevWordAfter.setLength(0);
				CoreLabel word = (CoreLabel)tokenFactory.MakeToken(txt, yychar, Yylength());
				word.Set(typeof(CoreAnnotations.OriginalTextAnnotation), originalText);
				//word.set(CoreAnnotations.BeforeAnnotation.class, str);
				//prevWord.set(CoreAnnotations.AfterAnnotation.class, str);
				//prevWord = word;
				return word;
			}
			else
			{
				return tokenFactory.MakeToken(txt, yychar, Yylength());
			}
		}

		private object GetNext(bool isWord)
		{
			string text = Yytext();
			string normText = NormalizeToken(text, isWord);
			return GetNext(normText, text);
		}

		private object GetEllipsis()
		{
			string ellipsisString = useUTF8Ellipsis ? "\u2026" : "...";
			return GetNext(ellipsisString, Yytext());
		}

		/// <summary>
		/// Creates a new scanner
		/// There is also a java.io.InputStream version of this constructor.
		/// </summary>
		/// <param name="in">the java.io.Reader to read input from.</param>
		internal ArabicLexer(Reader @in)
		{
			this.zzReader = @in;
		}

		/// <summary>Creates a new scanner.</summary>
		/// <remarks>
		/// Creates a new scanner.
		/// There is also java.io.Reader version of this constructor.
		/// </remarks>
		/// <param name="in">the java.io.Inputstream to read input from.</param>
		internal ArabicLexer(InputStream @in)
			: this(new InputStreamReader(@in, Java.Nio.Charset.Charset.ForName("UTF-8")))
		{
		}

		/// <summary>Unpacks the compressed character translation table.</summary>
		/// <param name="packed">the packed character translation table</param>
		/// <returns>the unpacked character translation table</returns>
		private static char[] ZzUnpackCMap(string packed)
		{
			char[] map = new char[unchecked((int)(0x10000))];
			int i = 0;
			/* index in packed string  */
			int j = 0;
			/* index in unpacked array */
			while (i < 1960)
			{
				int count = packed[i++];
				char value = packed[i++];
				do
				{
					map[j++] = value;
				}
				while (--count > 0);
			}
			return map;
		}

		/// <summary>Refills the input buffer.</summary>
		/// <returns><code>false</code>, iff there was new input.</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		private bool ZzRefill()
		{
			/* first: make room (if you can) */
			if (zzStartRead > 0)
			{
				System.Array.Copy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
				/* translate stored positions */
				zzEndRead -= zzStartRead;
				zzCurrentPos -= zzStartRead;
				zzMarkedPos -= zzStartRead;
				zzStartRead = 0;
			}
			/* is the buffer big enough? */
			if (zzCurrentPos >= zzBuffer.Length)
			{
				/* if not: blow it up */
				char[] newBuffer = new char[zzCurrentPos * 2];
				System.Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
				zzBuffer = newBuffer;
			}
			/* finally: fill the buffer with new input */
			int numRead = zzReader.Read(zzBuffer, zzEndRead, zzBuffer.Length - zzEndRead);
			if (numRead > 0)
			{
				zzEndRead += numRead;
				return false;
			}
			// unlikely but not impossible: read 0 characters, but not at end of stream    
			if (numRead == 0)
			{
				int c = zzReader.Read();
				if (c == -1)
				{
					return true;
				}
				else
				{
					zzBuffer[zzEndRead++] = (char)c;
					return false;
				}
			}
			// numRead < 0
			return true;
		}

		/// <summary>Closes the input stream.</summary>
		/// <exception cref="System.IO.IOException"/>
		public void Yyclose()
		{
			zzAtEOF = true;
			/* indicate end of file */
			zzEndRead = zzStartRead;
			/* invalidate buffer    */
			if (zzReader != null)
			{
				zzReader.Close();
			}
		}

		/// <summary>Resets the scanner to read from a new input stream.</summary>
		/// <remarks>
		/// Resets the scanner to read from a new input stream.
		/// Does not close the old reader.
		/// All internal variables are reset, the old input stream
		/// <b>cannot</b> be reused (internal buffer is discarded and lost).
		/// Lexical state is set to <tt>ZZ_INITIAL</tt>.
		/// Internal scan buffer is resized down to its initial length, if it has grown.
		/// </remarks>
		/// <param name="reader">the new input stream</param>
		public void Yyreset(Reader reader)
		{
			zzReader = reader;
			zzAtBOL = true;
			zzAtEOF = false;
			zzEOFDone = false;
			zzEndRead = zzStartRead = 0;
			zzCurrentPos = zzMarkedPos = 0;
			yyline = yychar = yycolumn = 0;
			zzLexicalState = Yyinitial;
			if (zzBuffer.Length > ZzBuffersize)
			{
				zzBuffer = new char[ZzBuffersize];
			}
		}

		/// <summary>Returns the current lexical state.</summary>
		public int Yystate()
		{
			return zzLexicalState;
		}

		/// <summary>Enters a new lexical state</summary>
		/// <param name="newState">the new lexical state</param>
		public void Yybegin(int newState)
		{
			zzLexicalState = newState;
		}

		/// <summary>Returns the text matched by the current regular expression.</summary>
		public string Yytext()
		{
			return new string(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
		}

		/// <summary>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// </summary>
		/// <remarks>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// It is equivalent to yytext().charAt(pos), but faster
		/// </remarks>
		/// <param name="pos">
		/// the position of the character to fetch.
		/// A value from 0 to yylength()-1.
		/// </param>
		/// <returns>the character at position pos</returns>
		public char Yycharat(int pos)
		{
			return zzBuffer[zzStartRead + pos];
		}

		/// <summary>Returns the length of the matched text region.</summary>
		public int Yylength()
		{
			return zzMarkedPos - zzStartRead;
		}

		/// <summary>Reports an error that occured while scanning.</summary>
		/// <remarks>
		/// Reports an error that occured while scanning.
		/// In a wellformed scanner (no or only correct usage of
		/// yypushback(int) and a match-all fallback rule) this method
		/// will only be called with things that "Can't Possibly Happen".
		/// If this method is called, something is seriously wrong
		/// (e.g. a JFlex bug producing a faulty scanner etc.).
		/// Usual syntax/scanner level error handling should be done
		/// in error fallback rules.
		/// </remarks>
		/// <param name="errorCode">the code of the errormessage to display</param>
		private void ZzScanError(int errorCode)
		{
			string message;
			try
			{
				message = ZzErrorMsg[errorCode];
			}
			catch (IndexOutOfRangeException)
			{
				message = ZzErrorMsg[ZzUnknownError];
			}
			throw new Exception(message);
		}

		/// <summary>Pushes the specified amount of characters back into the input stream.</summary>
		/// <remarks>
		/// Pushes the specified amount of characters back into the input stream.
		/// They will be read again by then next call of the scanning method
		/// </remarks>
		/// <param name="number">
		/// the number of characters to be read again.
		/// This number must not be greater than yylength()!
		/// </param>
		public virtual void Yypushback(int number)
		{
			if (number > Yylength())
			{
				ZzScanError(ZzPushback2big);
			}
			zzMarkedPos -= number;
		}

		/// <summary>
		/// Resumes scanning until the next regular expression is matched,
		/// the end of input is encountered or an I/O-Error occurs.
		/// </summary>
		/// <returns>the next token</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		public virtual object Next()
		{
			int zzInput;
			int zzAction;
			// cached fields:
			int zzCurrentPosL;
			int zzMarkedPosL;
			int zzEndReadL = zzEndRead;
			char[] zzBufferL = zzBuffer;
			char[] zzCMapL = ZzCmap;
			int[] zzTransL = ZzTrans;
			int[] zzRowMapL = ZzRowmap;
			int[] zzAttrL = ZzAttribute;
			while (true)
			{
				zzMarkedPosL = zzMarkedPos;
				yychar += zzMarkedPosL - zzStartRead;
				zzAction = -1;
				zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
				zzState = ZzLexstate[zzLexicalState];
				// set up zzAction for empty match case:
				int zzAttributes = zzAttrL[zzState];
				if ((zzAttributes & 1) == 1)
				{
					zzAction = zzState;
				}
				while (true)
				{
					if (zzCurrentPosL < zzEndReadL)
					{
						zzInput = zzBufferL[zzCurrentPosL++];
					}
					else
					{
						if (zzAtEOF)
						{
							zzInput = Yyeof;
							goto zzForAction_break;
						}
						else
						{
							// store back cached positions
							zzCurrentPos = zzCurrentPosL;
							zzMarkedPos = zzMarkedPosL;
							bool eof = ZzRefill();
							// get translated positions and possibly new buffer
							zzCurrentPosL = zzCurrentPos;
							zzMarkedPosL = zzMarkedPos;
							zzBufferL = zzBuffer;
							zzEndReadL = zzEndRead;
							if (eof)
							{
								zzInput = Yyeof;
								goto zzForAction_break;
							}
							else
							{
								zzInput = zzBufferL[zzCurrentPosL++];
							}
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
					{
						goto zzForAction_break;
					}
					zzState = zzNext;
					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
						{
							goto zzForAction_break;
						}
					}
				}
zzForAction_break: ;
				// store back cached position
				zzMarkedPos = zzMarkedPosL;
				switch (zzAction < 0 ? zzAction : ZzAction[zzAction])
				{
					case 1:
					{
						System.Console.Error.Printf("Untokenizable: %s%n", Yytext());
						return GetNext(true);
					}

					case 9:
					{
						break;
					}

					case 2:
					{
						if (tokenizeNLs)
						{
							return GetNext(NewlineToken, Yytext());
						}
						goto case 10;
					}

					case 10:
					{
						break;
					}

					case 3:
					{
						goto case 11;
					}

					case 11:
					{
						break;
					}

					case 4:
					{
						return GetNext(false);
					}

					case 12:
					{
						break;
					}

					case 5:
					{
						return GetNext(true);
					}

					case 13:
					{
						break;
					}

					case 6:
					{
						return GetEllipsis();
					}

					case 14:
					{
						break;
					}

					case 7:
					{
						if (!removeProMarker)
						{
							return GetNext(false);
						}
						goto case 15;
					}

					case 15:
					{
						break;
					}

					case 8:
					{
						if (removeProMarker)
						{
							if (!removeSegMarker)
							{
								return GetNext("-", Yytext());
							}
						}
						else
						{
							return GetNext(false);
						}
						goto case 16;
					}

					case 16:
					{
						break;
					}

					default:
					{
						if (zzInput == Yyeof && zzStartRead == zzCurrentPos)
						{
							zzAtEOF = true;
							{
								return null;
							}
						}
						else
						{
							ZzScanError(ZzNoMatch);
						}
						break;
					}
				}
			}
		}
	}
}
