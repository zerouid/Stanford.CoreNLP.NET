/* The following code was generated by JFlex 1.5.0-SNAPSHOT */
using System;
using System.IO;
using Edu.Stanford.Nlp.IO;
using Edu.Stanford.Nlp.Util.Logging;



namespace Edu.Stanford.Nlp.Trees.International.Negra
{
	/// <summary>
	/// A lexer for the Penn Treebank-style context-free version of the
	/// NEGRA corpus.
	/// </summary>
	/// <remarks>
	/// A lexer for the Penn Treebank-style context-free version of the
	/// NEGRA corpus.  Inherits ACCEPT and IGNORE fields from
	/// edu.stanford.nlp.trees.international.<code>Lexer</code>.
	/// </remarks>
	/// <author>Roger Levy</author>
	public class NegraPennLexer : ILexer
	{
		/// <summary>A logger for this class</summary>
		private static Redwood.RedwoodChannels log = Redwood.Channels(typeof(Edu.Stanford.Nlp.Trees.International.Negra.NegraPennLexer));

		/// <summary>This character denotes the end of file</summary>
		public const int Yyeof = -1;

		/// <summary>initial size of the lookahead buffer</summary>
		private const int ZzBuffersize = 16384;

		/// <summary>lexical states</summary>
		public const int Yyinitial = 0;

		public const int Sentence = 2;

		/// <summary>
		/// ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
		/// ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
		/// at the beginning of a line
		/// l is of the form l = 2*k, k a non negative integer
		/// </summary>
		private static readonly int[] ZzLexstate = new int[] { 0, 0, 1, 1 };

		/// <summary>Translates characters to character classes</summary>
		private const string ZzCmapPacked = "\xb\x0\x1\xb\x1\xd\x1\xb\x1\xb\x1\xc\x16\x0\x1\x2\x4\xe\x1\x1" + "\x2\xe\x2\xa\x6\xe\xc\x7\x1f\xe\x1\x3\xc\xe\x1\x0\x6\xe\x1\x4" + "\xa\xe\x1\x5\x5\xe\x1\x6\x6\xe\xc\x0\x1\xb\x29\x0\x1\xe\x11\x0" + "\x1\xe\xa\x0\x64\xe\u1f28\x0\x1\xb\x1\xb\udfd6\x0";

		/// <summary>Translates characters to character classes</summary>
		private static readonly char[] ZzCmap = ZzUnpackCMap(ZzCmapPacked);

		/// <summary>Translates DFA states to action switch labels.</summary>
		private static readonly int[] ZzAction = ZzUnpackAction();

		private const string ZzActionPacked0 = "\x2\x0\x1\x1\x1\x2\x1\x3\x2\x2\x1\x3\x1\x4\x1\x2" + "\x6\x0\x1\x3";

		private static int[] ZzUnpackAction()
		{
			int[] result = new int[17];
			int offset = 0;
			offset = ZzUnpackAction(ZzActionPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAction(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>Translates a state to a row index in the transition table</summary>
		private static readonly int[] ZzRowmap = ZzUnpackRowMap();

		private const string ZzRowmapPacked0 = "\x0\x0\x0\xf\x0\x20\x0\x2f\x0\x20\x0\x40\x0\x20\x0\x65" + "\x0\x20\x0\x74\x0\x85\x0\x96\x0\xa5\x0\xca\x0\xd9\x0\xea" + "\x0\xea";

		private static int[] ZzUnpackRowMap()
		{
			int[] result = new int[17];
			int offset = 0;
			offset = ZzUnpackRowMap(ZzRowmapPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackRowMap(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int high = packed[i++] << 16;
				result[j++] = high | packed[i++];
			}
			return j;
		}

		/// <summary>The transition table of the DFA</summary>
		private static readonly int[] ZzTrans = ZzUnpackTrans();

		private const string ZzTransPacked0 = "\x1\x3\x1\x4\x1\x5\x5\x6\x1\x7\x1\x5\x1\xa\x1\x5" + "\x1\x6\xf\xb\x10\x0\x1\xc\x1\x0\x5\x6\x4\x0\x1\x6" + "\x1\x0\x1\x6\x1\x0\x5\x6\x4\x0\x1\x6\xd\x0\x1\x5" + "\x2\x0\x1\x6\x1\xd\x5\x6\x4\x0\x1\x6\x3\x0\x1\xe"
			 + "\xf\x0\x1\xf\xf\x0\x1\x10\xf\x0\x1\x11\xa\x0\x1\x14" + "\x15\x0\x1\x15\x5\x0";

		private static int[] ZzUnpackTrans()
		{
			int[] result = new int[169];
			int offset = 0;
			offset = ZzUnpackTrans(ZzTransPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackTrans(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				value--;
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		private const int ZzUnknownError = 0;

		private const int ZzNoMatch = 1;

		private const int ZzPushback2big = 2;

		private static readonly string[] ZzErrorMsg = new string[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

		/// <summary>ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code></summary>
		private static readonly int[] ZzAttribute = ZzUnpackAttribute();

		private const string ZzAttributePacked0 = "\x2\x0\x1\xb\x1\x1\x1\xb\x1\x1\x1\xb\x1\x1\x1\xb" + "\x1\x1\x6\x0\x1\x1";

		/* error codes */
		/* error messages for the codes above */
		private static int[] ZzUnpackAttribute()
		{
			int[] result = new int[17];
			int offset = 0;
			offset = ZzUnpackAttribute(ZzAttributePacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAttribute(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>the input device</summary>
		private Reader zzReader;

		/// <summary>the current state of the DFA</summary>
		private int zzState;

		/// <summary>the current lexical state</summary>
		private int zzLexicalState = Yyinitial;

		/// <summary>
		/// this buffer contains the current text to be matched and is
		/// the source of the yytext() string
		/// </summary>
		private char[] zzBuffer = new char[ZzBuffersize];

		/// <summary>the textposition at the last accepting state</summary>
		private int zzMarkedPos;

		/// <summary>the current text position in the buffer</summary>
		private int zzCurrentPos;

		/// <summary>startRead marks the beginning of the yytext() string in the buffer</summary>
		private int zzStartRead;

		/// <summary>
		/// endRead marks the last character in the buffer, that has been read
		/// from input
		/// </summary>
		private int zzEndRead;

		/// <summary>number of newlines encountered up to the start of the matched text</summary>
		private int yyline;

		/// <summary>the number of characters up to the start of the matched text</summary>
		private int yychar;

		/// <summary>
		/// the number of characters from the last newline up to the start of the
		/// matched text
		/// </summary>
		private int yycolumn;

		/// <summary>zzAtBOL == true <=> the scanner is currently at the beginning of a line</summary>
		private bool zzAtBOL = true;

		/// <summary>zzAtEOF == true <=> the scanner is at the EOF</summary>
		private bool zzAtEOF;

		/// <summary>denotes if the user-EOF-code has already been executed</summary>
		private bool zzEOFDone;

		/* user code: */
		public virtual void PushBack(int n)
		{
			Yypushback(n);
		}

		public virtual int GetYYEOF()
		{
			return Yyeof;
		}

		/// <summary>
		/// Creates a new scanner
		/// There is also a java.io.InputStream version of this constructor.
		/// </summary>
		/// <param name="in">the java.io.Reader to read input from.</param>
		internal NegraPennLexer(Reader @in)
		{
			this.zzReader = @in;
		}

		/// <summary>Creates a new scanner.</summary>
		/// <remarks>
		/// Creates a new scanner.
		/// There is also java.io.Reader version of this constructor.
		/// </remarks>
		/// <param name="in">the java.io.Inputstream to read input from.</param>
		internal NegraPennLexer(InputStream @in)
			: this(new InputStreamReader(@in, Java.Nio.Charset.Charset.ForName("UTF-8")))
		{
		}

		/// <summary>Unpacks the compressed character translation table.</summary>
		/// <param name="packed">the packed character translation table</param>
		/// <returns>the unpacked character translation table</returns>
		private static char[] ZzUnpackCMap(string packed)
		{
			char[] map = new char[unchecked((int)(0x10000))];
			int i = 0;
			/* index in packed string  */
			int j = 0;
			/* index in unpacked array */
			while (i < 74)
			{
				int count = packed[i++];
				char value = packed[i++];
				do
				{
					map[j++] = value;
				}
				while (--count > 0);
			}
			return map;
		}

		/// <summary>Refills the input buffer.</summary>
		/// <returns><code>false</code>, iff there was new input.</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		private bool ZzRefill()
		{
			/* first: make room (if you can) */
			if (zzStartRead > 0)
			{
				System.Array.Copy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
				/* translate stored positions */
				zzEndRead -= zzStartRead;
				zzCurrentPos -= zzStartRead;
				zzMarkedPos -= zzStartRead;
				zzStartRead = 0;
			}
			/* is the buffer big enough? */
			if (zzCurrentPos >= zzBuffer.Length)
			{
				/* if not: blow it up */
				char[] newBuffer = new char[zzCurrentPos * 2];
				System.Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
				zzBuffer = newBuffer;
			}
			/* finally: fill the buffer with new input */
			int numRead = zzReader.Read(zzBuffer, zzEndRead, zzBuffer.Length - zzEndRead);
			if (numRead > 0)
			{
				zzEndRead += numRead;
				return false;
			}
			// unlikely but not impossible: read 0 characters, but not at end of stream
			if (numRead == 0)
			{
				int c = zzReader.Read();
				if (c == -1)
				{
					return true;
				}
				else
				{
					zzBuffer[zzEndRead++] = (char)c;
					return false;
				}
			}
			// numRead < 0
			return true;
		}

		/// <summary>Closes the input stream.</summary>
		/// <exception cref="System.IO.IOException"/>
		public void Yyclose()
		{
			zzAtEOF = true;
			/* indicate end of file */
			zzEndRead = zzStartRead;
			/* invalidate buffer    */
			if (zzReader != null)
			{
				zzReader.Close();
			}
		}

		/// <summary>Resets the scanner to read from a new input stream.</summary>
		/// <remarks>
		/// Resets the scanner to read from a new input stream.
		/// Does not close the old reader.
		/// All internal variables are reset, the old input stream
		/// <b>cannot</b> be reused (internal buffer is discarded and lost).
		/// Lexical state is set to <tt>ZZ_INITIAL</tt>.
		/// Internal scan buffer is resized down to its initial length, if it has grown.
		/// </remarks>
		/// <param name="reader">the new input stream</param>
		public void Yyreset(Reader reader)
		{
			zzReader = reader;
			zzAtBOL = true;
			zzAtEOF = false;
			zzEOFDone = false;
			zzEndRead = zzStartRead = 0;
			zzCurrentPos = zzMarkedPos = 0;
			yyline = yychar = yycolumn = 0;
			zzLexicalState = Yyinitial;
			if (zzBuffer.Length > ZzBuffersize)
			{
				zzBuffer = new char[ZzBuffersize];
			}
		}

		/// <summary>Returns the current lexical state.</summary>
		public int Yystate()
		{
			return zzLexicalState;
		}

		/// <summary>Enters a new lexical state</summary>
		/// <param name="newState">the new lexical state</param>
		public void Yybegin(int newState)
		{
			zzLexicalState = newState;
		}

		/// <summary>Returns the text matched by the current regular expression.</summary>
		public string Yytext()
		{
			return new string(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
		}

		/// <summary>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// </summary>
		/// <remarks>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// It is equivalent to yytext().charAt(pos), but faster
		/// </remarks>
		/// <param name="pos">
		/// the position of the character to fetch.
		/// A value from 0 to yylength()-1.
		/// </param>
		/// <returns>the character at position pos</returns>
		public char Yycharat(int pos)
		{
			return zzBuffer[zzStartRead + pos];
		}

		/// <summary>Returns the length of the matched text region.</summary>
		public int Yylength()
		{
			return zzMarkedPos - zzStartRead;
		}

		/// <summary>Reports an error that occured while scanning.</summary>
		/// <remarks>
		/// Reports an error that occured while scanning.
		/// In a wellformed scanner (no or only correct usage of
		/// yypushback(int) and a match-all fallback rule) this method
		/// will only be called with things that "Can't Possibly Happen".
		/// If this method is called, something is seriously wrong
		/// (e.g. a JFlex bug producing a faulty scanner etc.).
		/// Usual syntax/scanner level error handling should be done
		/// in error fallback rules.
		/// </remarks>
		/// <param name="errorCode">the code of the errormessage to display</param>
		private void ZzScanError(int errorCode)
		{
			string message;
			try
			{
				message = ZzErrorMsg[errorCode];
			}
			catch (IndexOutOfRangeException)
			{
				message = ZzErrorMsg[ZzUnknownError];
			}
			throw new Exception(message);
		}

		/// <summary>Pushes the specified amount of characters back into the input stream.</summary>
		/// <remarks>
		/// Pushes the specified amount of characters back into the input stream.
		/// They will be read again by then next call of the scanning method
		/// </remarks>
		/// <param name="number">
		/// the number of characters to be read again.
		/// This number must not be greater than yylength()!
		/// </param>
		public virtual void Yypushback(int number)
		{
			if (number > Yylength())
			{
				ZzScanError(ZzPushback2big);
			}
			zzMarkedPos -= number;
		}

		/// <summary>
		/// Resumes scanning until the next regular expression is matched,
		/// the end of input is encountered or an I/O-Error occurs.
		/// </summary>
		/// <returns>the next token</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		public virtual int Yylex()
		{
			int zzInput;
			int zzAction;
			// cached fields:
			int zzCurrentPosL;
			int zzMarkedPosL;
			int zzEndReadL = zzEndRead;
			char[] zzBufferL = zzBuffer;
			char[] zzCMapL = ZzCmap;
			int[] zzTransL = ZzTrans;
			int[] zzRowMapL = ZzRowmap;
			int[] zzAttrL = ZzAttribute;
			while (true)
			{
				zzMarkedPosL = zzMarkedPos;
				zzAction = -1;
				zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
				zzState = ZzLexstate[zzLexicalState];
				// set up zzAction for empty match case:
				int zzAttributes = zzAttrL[zzState];
				if ((zzAttributes & 1) == 1)
				{
					zzAction = zzState;
				}
				while (true)
				{
					if (zzCurrentPosL < zzEndReadL)
					{
						zzInput = zzBufferL[zzCurrentPosL++];
					}
					else
					{
						if (zzAtEOF)
						{
							zzInput = Yyeof;
							goto zzForAction_break;
						}
						else
						{
							// store back cached positions
							zzCurrentPos = zzCurrentPosL;
							zzMarkedPos = zzMarkedPosL;
							bool eof = ZzRefill();
							// get translated positions and possibly new buffer
							zzCurrentPosL = zzCurrentPos;
							zzMarkedPosL = zzMarkedPos;
							zzBufferL = zzBuffer;
							zzEndReadL = zzEndRead;
							if (eof)
							{
								zzInput = Yyeof;
								goto zzForAction_break;
							}
							else
							{
								zzInput = zzBufferL[zzCurrentPosL++];
							}
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
					{
						goto zzForAction_break;
					}
					zzState = zzNext;
					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
						{
							goto zzForAction_break;
						}
					}
				}
zzForAction_break: ;
				// store back cached position
				zzMarkedPos = zzMarkedPosL;
				switch (zzAction < 0 ? zzAction : ZzAction[zzAction])
				{
					case 1:
					{
						log.Info("Error: " + Yytext());
						return LexerConstants.Ignore;
					}

					case 5:
					{
						break;
					}

					case 2:
					{
						return LexerConstants.Accept;
					}

					case 6:
					{
						break;
					}

					case 3:
					{
						return LexerConstants.Ignore;
					}

					case 7:
					{
						break;
					}

					case 4:
					{
						System.Console.Out.Write(Yytext());
						goto case 8;
					}

					case 8:
					{
						break;
					}

					default:
					{
						if (zzInput == Yyeof && zzStartRead == zzCurrentPos)
						{
							zzAtEOF = true;
							return Yyeof;
						}
						else
						{
							ZzScanError(ZzNoMatch);
						}
						break;
					}
				}
			}
		}

		/// <summary>Runs the scanner on input files.</summary>
		/// <remarks>
		/// Runs the scanner on input files.
		/// This is a standalone scanner, it will print any unmatched
		/// text to System.out unchanged.
		/// </remarks>
		/// <param name="argv">
		/// the command line, contains the filenames to run
		/// the scanner on.
		/// </param>
		public static void Main(string[] argv)
		{
			if (argv.Length == 0)
			{
				System.Console.Out.WriteLine("Usage : java NegraPennLexer [ --encoding <name> ] <inputfile(s)>");
			}
			else
			{
				int firstFilePos = 0;
				string encodingName = "UTF-8";
				if (argv[0].Equals("--encoding"))
				{
					firstFilePos = 2;
					encodingName = argv[1];
					try
					{
						Java.Nio.Charset.Charset.ForName(encodingName);
					}
					catch (Exception)
					{
						// Side-effect: is encodingName valid?
						System.Console.Out.WriteLine("Invalid encoding '" + encodingName + "'");
						return;
					}
				}
				for (int i = firstFilePos; i < argv.Length; i++)
				{
					Edu.Stanford.Nlp.Trees.International.Negra.NegraPennLexer scanner = null;
					try
					{
						FileInputStream stream = new FileInputStream(argv[i]);
						Reader reader = new InputStreamReader(stream, encodingName);
						scanner = new Edu.Stanford.Nlp.Trees.International.Negra.NegraPennLexer(reader);
						while (!scanner.zzAtEOF)
						{
							scanner.Yylex();
						}
					}
					catch (FileNotFoundException)
					{
						System.Console.Out.WriteLine("File not found : \"" + argv[i] + "\"");
					}
					catch (IOException e)
					{
						System.Console.Out.WriteLine("IO error scanning file \"" + argv[i] + "\"");
						System.Console.Out.WriteLine(e);
					}
					catch (Exception e)
					{
						System.Console.Out.WriteLine("Unexpected exception:");
						Sharpen.Runtime.PrintStackTrace(e);
					}
				}
			}
		}
	}
}
