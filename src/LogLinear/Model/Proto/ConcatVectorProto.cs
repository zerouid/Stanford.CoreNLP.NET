// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConcatVector.proto
using System;
using System.Collections.Generic;
using System.IO;
using Com.Google.Protobuf;



namespace Edu.Stanford.Nlp.Loglinear.Model.Proto
{
	public sealed class ConcatVectorProto
	{
		private ConcatVectorProto()
		{
		}

		public static void RegisterAllExtensions(ExtensionRegistry registry)
		{
		}

		public interface IConcatVectorOrBuilder : IMessageOrBuilder
		{
			// @@protoc_insertion_point(interface_extends:edu.stanford.nlp.loglinear.model.proto.ConcatVector)
			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			IList<ConcatVectorProto.ConcatVector.Component> GetComponentList();

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			ConcatVectorProto.ConcatVector.Component GetComponent(int index);

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			int GetComponentCount();

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			IList<ConcatVectorProto.ConcatVector.IComponentOrBuilder> GetComponentOrBuilderList();

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			ConcatVectorProto.ConcatVector.IComponentOrBuilder GetComponentOrBuilder(int index);
		}

		/// <summary>
		/// Protobuf type
		/// <c>edu.stanford.nlp.loglinear.model.proto.ConcatVector</c>
		/// </summary>
		[System.Serializable]
		public sealed class ConcatVector : GeneratedMessage, ConcatVectorProto.IConcatVectorOrBuilder
		{
			private ConcatVector(GeneratedMessage.Builder<object> builder)
				: base(builder)
			{
				// @@protoc_insertion_point(message_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVector)
				// Use ConcatVector.newBuilder() to construct.
				this.unknownFields = builder.GetUnknownFields();
			}

			private ConcatVector(bool noInit)
			{
				this.unknownFields = UnknownFieldSet.GetDefaultInstance();
			}

			private static readonly ConcatVectorProto.ConcatVector defaultInstance;

			public static ConcatVectorProto.ConcatVector GetDefaultInstance()
			{
				return defaultInstance;
			}

			public override IMessageLite GetDefaultInstanceForType()
			{
				return defaultInstance;
			}

			private readonly UnknownFieldSet unknownFields;

			public sealed override UnknownFieldSet GetUnknownFields()
			{
				return this.unknownFields;
			}

			/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
			private ConcatVector(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
			{
				InitFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.NewBuilder();
				try
				{
					bool done = false;
					while (!done)
					{
						int tag = input.ReadTag();
						switch (tag)
						{
							case 0:
							{
								done = true;
								break;
							}

							default:
							{
								if (!ParseUnknownField(input, unknownFields, extensionRegistry, tag))
								{
									done = true;
								}
								break;
							}

							case 10:
							{
								if (!((mutable_bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
								{
									component_ = new List<ConcatVectorProto.ConcatVector.Component>();
									mutable_bitField0_ |= unchecked((int)(0x00000001));
								}
								component_.Add(input.ReadMessage(ConcatVectorProto.ConcatVector.Component.Parser, extensionRegistry));
								break;
							}
						}
					}
				}
				catch (InvalidProtocolBufferException e)
				{
					throw e.SetUnfinishedMessage(this);
				}
				catch (IOException e)
				{
					throw new InvalidProtocolBufferException(e.Message).SetUnfinishedMessage(this);
				}
				finally
				{
					if (((mutable_bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
					{
						component_ = Java.Util.Collections.UnmodifiableList(component_);
					}
					this.unknownFields = unknownFields.Build();
					MakeExtensionsImmutable();
				}
			}

			public static Descriptors.Descriptor GetDescriptor()
			{
				return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor;
			}

			protected override GeneratedMessage.FieldAccessorTable InternalGetFieldAccessorTable()
			{
				return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_fieldAccessorTable.EnsureFieldAccessorsInitialized(typeof(ConcatVectorProto.ConcatVector), typeof(ConcatVectorProto.ConcatVector.Builder));
			}

			private sealed class _AbstractParser_129 : AbstractParser<ConcatVectorProto.ConcatVector>
			{
				public _AbstractParser_129()
				{
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				public override ConcatVectorProto.ConcatVector ParsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
				{
					return new ConcatVectorProto.ConcatVector(input, extensionRegistry);
				}
			}

			public static IParser<ConcatVectorProto.ConcatVector> Parser = new _AbstractParser_129();

			public override IParser<IMessageLite> GetParserForType()
			{
				return Parser;
			}

			public interface IComponentOrBuilder : IMessageOrBuilder
			{
				// @@protoc_insertion_point(interface_extends:edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component)
				/// <summary><code>required bool sparse = 1;</code></summary>
				bool HasSparse();

				/// <summary><code>required bool sparse = 1;</code></summary>
				bool GetSparse();

				/// <summary><code>repeated double data = 2;</code></summary>
				IList<double> GetDataList();

				/// <summary><code>repeated double data = 2;</code></summary>
				int GetDataCount();

				/// <summary><code>repeated double data = 2;</code></summary>
				double GetData(int index);
			}

			/// <summary>
			/// Protobuf type
			/// <c>edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component</c>
			/// </summary>
			[System.Serializable]
			public sealed class Component : GeneratedMessage, ConcatVectorProto.ConcatVector.IComponentOrBuilder
			{
				private Component(GeneratedMessage.Builder<object> builder)
					: base(builder)
				{
					// @@protoc_insertion_point(message_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component)
					// Use Component.newBuilder() to construct.
					this.unknownFields = builder.GetUnknownFields();
				}

				private Component(bool noInit)
				{
					this.unknownFields = UnknownFieldSet.GetDefaultInstance();
				}

				private static readonly ConcatVectorProto.ConcatVector.Component defaultInstance;

				public static ConcatVectorProto.ConcatVector.Component GetDefaultInstance()
				{
					return defaultInstance;
				}

				public override IMessageLite GetDefaultInstanceForType()
				{
					return defaultInstance;
				}

				private readonly UnknownFieldSet unknownFields;

				public sealed override UnknownFieldSet GetUnknownFields()
				{
					return this.unknownFields;
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				private Component(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
				{
					InitFields();
					int mutable_bitField0_ = 0;
					UnknownFieldSet.Builder unknownFields = UnknownFieldSet.NewBuilder();
					try
					{
						bool done = false;
						while (!done)
						{
							int tag = input.ReadTag();
							switch (tag)
							{
								case 0:
								{
									done = true;
									break;
								}

								default:
								{
									if (!ParseUnknownField(input, unknownFields, extensionRegistry, tag))
									{
										done = true;
									}
									break;
								}

								case 8:
								{
									bitField0_ |= unchecked((int)(0x00000001));
									sparse_ = input.ReadBool();
									break;
								}

								case 17:
								{
									if (!((mutable_bitField0_ & unchecked((int)(0x00000002))) == unchecked((int)(0x00000002))))
									{
										data_ = new List<double>();
										mutable_bitField0_ |= unchecked((int)(0x00000002));
									}
									data_.Add(input.ReadDouble());
									break;
								}

								case 18:
								{
									int length = input.ReadRawVarint32();
									int limit = input.PushLimit(length);
									if (!((mutable_bitField0_ & unchecked((int)(0x00000002))) == unchecked((int)(0x00000002))) && input.GetBytesUntilLimit() > 0)
									{
										data_ = new List<double>();
										mutable_bitField0_ |= unchecked((int)(0x00000002));
									}
									while (input.GetBytesUntilLimit() > 0)
									{
										data_.Add(input.ReadDouble());
									}
									input.PopLimit(limit);
									break;
								}
							}
						}
					}
					catch (InvalidProtocolBufferException e)
					{
						throw e.SetUnfinishedMessage(this);
					}
					catch (IOException e)
					{
						throw new InvalidProtocolBufferException(e.Message).SetUnfinishedMessage(this);
					}
					finally
					{
						if (((mutable_bitField0_ & unchecked((int)(0x00000002))) == unchecked((int)(0x00000002))))
						{
							data_ = Java.Util.Collections.UnmodifiableList(data_);
						}
						this.unknownFields = unknownFields.Build();
						MakeExtensionsImmutable();
					}
				}

				public static Descriptors.Descriptor GetDescriptor()
				{
					return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor;
				}

				protected override GeneratedMessage.FieldAccessorTable InternalGetFieldAccessorTable()
				{
					return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_fieldAccessorTable.EnsureFieldAccessorsInitialized(typeof(ConcatVectorProto.ConcatVector.Component), typeof(ConcatVectorProto.ConcatVector.Component.Builder
						));
				}

				private sealed class _AbstractParser_275 : AbstractParser<ConcatVectorProto.ConcatVector.Component>
				{
					public _AbstractParser_275()
					{
					}

					/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
					public override ConcatVectorProto.ConcatVector.Component ParsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
					{
						return new ConcatVectorProto.ConcatVector.Component(input, extensionRegistry);
					}
				}

				public static IParser<ConcatVectorProto.ConcatVector.Component> Parser = new _AbstractParser_275();

				public override IParser<IMessageLite> GetParserForType()
				{
					return Parser;
				}

				private int bitField0_;

				public const int SparseFieldNumber = 1;

				private bool sparse_;

				/// <summary><code>required bool sparse = 1;</code></summary>
				public bool HasSparse()
				{
					return ((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001)));
				}

				/// <summary><code>required bool sparse = 1;</code></summary>
				public bool GetSparse()
				{
					return sparse_;
				}

				public const int DataFieldNumber = 2;

				private IList<double> data_;

				/// <summary><code>repeated double data = 2;</code></summary>
				public IList<double> GetDataList()
				{
					return data_;
				}

				/// <summary><code>repeated double data = 2;</code></summary>
				public int GetDataCount()
				{
					return data_.Count;
				}

				/// <summary><code>repeated double data = 2;</code></summary>
				public double GetData(int index)
				{
					return data_[index];
				}

				private void InitFields()
				{
					sparse_ = false;
					data_ = Java.Util.Collections.EmptyList();
				}

				private byte memoizedIsInitialized = unchecked((byte)(-1));

				public sealed override bool IsInitialized()
				{
					byte isInitialized = memoizedIsInitialized;
					if (isInitialized == 1)
					{
						return true;
					}
					if (isInitialized == 0)
					{
						return false;
					}
					if (!HasSparse())
					{
						memoizedIsInitialized = 0;
						return false;
					}
					memoizedIsInitialized = 1;
					return true;
				}

				/// <exception cref="System.IO.IOException"/>
				public override void WriteTo(CodedOutputStream output)
				{
					GetSerializedSize();
					if (((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
					{
						output.WriteBool(1, sparse_);
					}
					foreach (double aData_ in data_)
					{
						output.WriteDouble(2, aData_);
					}
					GetUnknownFields().WriteTo(output);
				}

				private int memoizedSerializedSize = -1;

				public override int GetSerializedSize()
				{
					int size = memoizedSerializedSize;
					if (size != -1)
					{
						return size;
					}
					size = 0;
					if (((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
					{
						size += CodedOutputStream.ComputeBoolSize(1, sparse_);
					}
					{
						int dataSize = 0;
						dataSize = 8 * GetDataList().Count;
						size += dataSize;
						size += 1 * GetDataList().Count;
					}
					size += GetUnknownFields().GetSerializedSize();
					memoizedSerializedSize = size;
					return size;
				}

				private const long serialVersionUID = 0L;

				/// <exception cref="Java.IO.ObjectStreamException"/>
				protected override object WriteReplace()
				{
					return base.WriteReplace();
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(ByteString data)
				{
					return Parser.ParseFrom(data);
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
				{
					return Parser.ParseFrom(data, extensionRegistry);
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(byte[] data)
				{
					return Parser.ParseFrom(data);
				}

				/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(byte[] data, ExtensionRegistryLite extensionRegistry)
				{
					return Parser.ParseFrom(data, extensionRegistry);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(InputStream input)
				{
					return Parser.ParseFrom(input);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
				{
					return Parser.ParseFrom(input, extensionRegistry);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseDelimitedFrom(InputStream input)
				{
					return Parser.ParseDelimitedFrom(input);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
				{
					return Parser.ParseDelimitedFrom(input, extensionRegistry);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(CodedInputStream input)
				{
					return Parser.ParseFrom(input);
				}

				/// <exception cref="System.IO.IOException"/>
				public static ConcatVectorProto.ConcatVector.Component ParseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
				{
					return Parser.ParseFrom(input, extensionRegistry);
				}

				public static ConcatVectorProto.ConcatVector.Component.Builder NewBuilder()
				{
					return ConcatVectorProto.ConcatVector.Component.Builder.Create();
				}

				public override MessageLite.IBuilder NewBuilderForType()
				{
					return NewBuilder();
				}

				public static ConcatVectorProto.ConcatVector.Component.Builder NewBuilder(ConcatVectorProto.ConcatVector.Component prototype)
				{
					return NewBuilder().MergeFrom(prototype);
				}

				public override MessageLite.IBuilder ToBuilder()
				{
					return NewBuilder(this);
				}

				protected override Message.IBuilder NewBuilderForType(GeneratedMessage.IBuilderParent parent)
				{
					ConcatVectorProto.ConcatVector.Component.Builder builder = new ConcatVectorProto.ConcatVector.Component.Builder(parent);
					return builder;
				}

				/// <summary>
				/// Protobuf type
				/// <c>edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component</c>
				/// </summary>
				public sealed class Builder : GeneratedMessage.Builder<ConcatVectorProto.ConcatVector.Component.Builder>, ConcatVectorProto.ConcatVector.IComponentOrBuilder
				{
					// @@protoc_insertion_point(builder_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component)
					public static Descriptors.Descriptor GetDescriptor()
					{
						return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor;
					}

					protected override GeneratedMessage.FieldAccessorTable InternalGetFieldAccessorTable()
					{
						return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_fieldAccessorTable.EnsureFieldAccessorsInitialized(typeof(ConcatVectorProto.ConcatVector.Component), typeof(ConcatVectorProto.ConcatVector.Component.Builder
							));
					}

					private Builder()
					{
						// Construct using edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.Component.newBuilder()
						MaybeForceBuilderInitialization();
					}

					private Builder(GeneratedMessage.IBuilderParent parent)
						: base(parent)
					{
						MaybeForceBuilderInitialization();
					}

					private void MaybeForceBuilderInitialization()
					{
						if (GeneratedMessage.alwaysUseFieldBuilders)
						{
						}
					}

					private static ConcatVectorProto.ConcatVector.Component.Builder Create()
					{
						return new ConcatVectorProto.ConcatVector.Component.Builder();
					}

					public override MessageLite.IBuilder Clear()
					{
						base.Clear();
						sparse_ = false;
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
						data_ = Java.Util.Collections.EmptyList();
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000002)));
						return this;
					}

					public override AbstractMessageLite.Builder Clone()
					{
						return Create().MergeFrom(((ConcatVectorProto.ConcatVector.Component)BuildPartial()));
					}

					public override Descriptors.Descriptor GetDescriptorForType()
					{
						return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor;
					}

					public override IMessageLite GetDefaultInstanceForType()
					{
						return ConcatVectorProto.ConcatVector.Component.GetDefaultInstance();
					}

					public override IMessageLite Build()
					{
						ConcatVectorProto.ConcatVector.Component result = ((ConcatVectorProto.ConcatVector.Component)BuildPartial());
						if (!result.IsInitialized())
						{
							throw NewUninitializedMessageException(result);
						}
						return result;
					}

					public override IMessageLite BuildPartial()
					{
						ConcatVectorProto.ConcatVector.Component result = new ConcatVectorProto.ConcatVector.Component(this);
						int from_bitField0_ = bitField0_;
						int to_bitField0_ = 0;
						if (((from_bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
						{
							to_bitField0_ |= unchecked((int)(0x00000001));
						}
						result.sparse_ = sparse_;
						if (((bitField0_ & unchecked((int)(0x00000002))) == unchecked((int)(0x00000002))))
						{
							data_ = Java.Util.Collections.UnmodifiableList(data_);
							bitField0_ = (bitField0_ & ~unchecked((int)(0x00000002)));
						}
						result.data_ = data_;
						result.bitField0_ = to_bitField0_;
						OnBuilt();
						return result;
					}

					public override ConcatVectorProto.ConcatVector.Component.Builder MergeFrom(IMessage other)
					{
						if (other is ConcatVectorProto.ConcatVector.Component)
						{
							return MergeFrom((ConcatVectorProto.ConcatVector.Component)other);
						}
						else
						{
							base.MergeFrom(other);
							return this;
						}
					}

					public ConcatVectorProto.ConcatVector.Component.Builder MergeFrom(ConcatVectorProto.ConcatVector.Component other)
					{
						if (other == ConcatVectorProto.ConcatVector.Component.GetDefaultInstance())
						{
							return this;
						}
						if (other.HasSparse())
						{
							SetSparse(other.GetSparse());
						}
						if (!other.data_.IsEmpty())
						{
							if (data_.IsEmpty())
							{
								data_ = other.data_;
								bitField0_ = (bitField0_ & ~unchecked((int)(0x00000002)));
							}
							else
							{
								EnsureDataIsMutable();
								Sharpen.Collections.AddAll(data_, other.data_);
							}
							OnChanged();
						}
						this.MergeUnknownFields(other.GetUnknownFields());
						return this;
					}

					public sealed override bool IsInitialized()
					{
						if (!HasSparse())
						{
							return false;
						}
						return true;
					}

					/// <exception cref="System.IO.IOException"/>
					public override AbstractMessageLite.Builder MergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
					{
						ConcatVectorProto.ConcatVector.Component parsedMessage = null;
						try
						{
							parsedMessage = Parser.ParsePartialFrom(input, extensionRegistry);
						}
						catch (InvalidProtocolBufferException e)
						{
							parsedMessage = (ConcatVectorProto.ConcatVector.Component)e.GetUnfinishedMessage();
							throw;
						}
						finally
						{
							if (parsedMessage != null)
							{
								MergeFrom(parsedMessage);
							}
						}
						return this;
					}

					private int bitField0_;

					private bool sparse_;

					/// <summary><code>required bool sparse = 1;</code></summary>
					public bool HasSparse()
					{
						return ((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001)));
					}

					/// <summary><code>required bool sparse = 1;</code></summary>
					public bool GetSparse()
					{
						return sparse_;
					}

					/// <summary><code>required bool sparse = 1;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder SetSparse(bool value)
					{
						bitField0_ |= unchecked((int)(0x00000001));
						sparse_ = value;
						OnChanged();
						return this;
					}

					/// <summary><code>required bool sparse = 1;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder ClearSparse()
					{
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
						sparse_ = false;
						OnChanged();
						return this;
					}

					private IList<double> data_ = Java.Util.Collections.EmptyList();

					private void EnsureDataIsMutable()
					{
						if (!((bitField0_ & unchecked((int)(0x00000002))) == unchecked((int)(0x00000002))))
						{
							data_ = new List<double>(data_);
							bitField0_ |= unchecked((int)(0x00000002));
						}
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public IList<double> GetDataList()
					{
						return Java.Util.Collections.UnmodifiableList(data_);
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public int GetDataCount()
					{
						return data_.Count;
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public double GetData(int index)
					{
						return data_[index];
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder SetData(int index, double value)
					{
						EnsureDataIsMutable();
						data_.Set(index, value);
						OnChanged();
						return this;
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder AddData(double value)
					{
						EnsureDataIsMutable();
						data_.Add(value);
						OnChanged();
						return this;
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder AddAllData<_T0>(IEnumerable<_T0> values)
						where _T0 : double
					{
						EnsureDataIsMutable();
						AbstractMessageLite.Builder.AddAll(values, data_);
						OnChanged();
						return this;
					}

					/// <summary><code>repeated double data = 2;</code></summary>
					public ConcatVectorProto.ConcatVector.Component.Builder ClearData()
					{
						data_ = Java.Util.Collections.EmptyList();
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000002)));
						OnChanged();
						return this;
					}
					// @@protoc_insertion_point(builder_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component)
				}

				static Component()
				{
					defaultInstance = new ConcatVectorProto.ConcatVector.Component(true);
					defaultInstance.InitFields();
				}
				// @@protoc_insertion_point(class_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component)
			}

			public const int ComponentFieldNumber = 1;

			private IList<ConcatVectorProto.ConcatVector.Component> component_;

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			public IList<ConcatVectorProto.ConcatVector.Component> GetComponentList()
			{
				return component_;
			}

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			public IList<ConcatVectorProto.ConcatVector.IComponentOrBuilder> GetComponentOrBuilderList()
			{
				return component_;
			}

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			public int GetComponentCount()
			{
				return component_.Count;
			}

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			public ConcatVectorProto.ConcatVector.Component GetComponent(int index)
			{
				return component_[index];
			}

			/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
			public ConcatVectorProto.ConcatVector.IComponentOrBuilder GetComponentOrBuilder(int index)
			{
				return component_[index];
			}

			private void InitFields()
			{
				component_ = Java.Util.Collections.EmptyList();
			}

			private byte memoizedIsInitialized = unchecked((byte)(-1));

			public sealed override bool IsInitialized()
			{
				byte isInitialized = memoizedIsInitialized;
				if (isInitialized == 1)
				{
					return true;
				}
				if (isInitialized == 0)
				{
					return false;
				}
				for (int i = 0; i < GetComponentCount(); i++)
				{
					if (!GetComponent(i).IsInitialized())
					{
						memoizedIsInitialized = 0;
						return false;
					}
				}
				memoizedIsInitialized = 1;
				return true;
			}

			/// <exception cref="System.IO.IOException"/>
			public override void WriteTo(CodedOutputStream output)
			{
				GetSerializedSize();
				foreach (ConcatVectorProto.ConcatVector.Component aComponent_ in component_)
				{
					output.WriteMessage(1, aComponent_);
				}
				GetUnknownFields().WriteTo(output);
			}

			private int memoizedSerializedSize = -1;

			public override int GetSerializedSize()
			{
				int size = memoizedSerializedSize;
				if (size != -1)
				{
					return size;
				}
				size = 0;
				foreach (ConcatVectorProto.ConcatVector.Component aComponent_ in component_)
				{
					size += CodedOutputStream.ComputeMessageSize(1, aComponent_);
				}
				size += GetUnknownFields().GetSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}

			private const long serialVersionUID = 0L;

			/// <exception cref="Java.IO.ObjectStreamException"/>
			protected override object WriteReplace()
			{
				return base.WriteReplace();
			}

			/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(ByteString data)
			{
				return Parser.ParseFrom(data);
			}

			/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
			{
				return Parser.ParseFrom(data, extensionRegistry);
			}

			/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(byte[] data)
			{
				return Parser.ParseFrom(data);
			}

			/// <exception cref="Com.Google.Protobuf.InvalidProtocolBufferException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(byte[] data, ExtensionRegistryLite extensionRegistry)
			{
				return Parser.ParseFrom(data, extensionRegistry);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(InputStream input)
			{
				return Parser.ParseFrom(input);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
			{
				return Parser.ParseFrom(input, extensionRegistry);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseDelimitedFrom(InputStream input)
			{
				return Parser.ParseDelimitedFrom(input);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
			{
				return Parser.ParseDelimitedFrom(input, extensionRegistry);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(CodedInputStream input)
			{
				return Parser.ParseFrom(input);
			}

			/// <exception cref="System.IO.IOException"/>
			public static ConcatVectorProto.ConcatVector ParseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
			{
				return Parser.ParseFrom(input, extensionRegistry);
			}

			public static ConcatVectorProto.ConcatVector.Builder NewBuilder()
			{
				return ConcatVectorProto.ConcatVector.Builder.Create();
			}

			public override MessageLite.IBuilder NewBuilderForType()
			{
				return NewBuilder();
			}

			public static ConcatVectorProto.ConcatVector.Builder NewBuilder(ConcatVectorProto.ConcatVector prototype)
			{
				return NewBuilder().MergeFrom(prototype);
			}

			public override MessageLite.IBuilder ToBuilder()
			{
				return NewBuilder(this);
			}

			protected override Message.IBuilder NewBuilderForType(GeneratedMessage.IBuilderParent parent)
			{
				ConcatVectorProto.ConcatVector.Builder builder = new ConcatVectorProto.ConcatVector.Builder(parent);
				return builder;
			}

			/// <summary>
			/// Protobuf type
			/// <c>edu.stanford.nlp.loglinear.model.proto.ConcatVector</c>
			/// </summary>
			public sealed class Builder : GeneratedMessage.Builder<ConcatVectorProto.ConcatVector.Builder>, ConcatVectorProto.IConcatVectorOrBuilder
			{
				// @@protoc_insertion_point(builder_implements:edu.stanford.nlp.loglinear.model.proto.ConcatVector)
				public static Descriptors.Descriptor GetDescriptor()
				{
					return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor;
				}

				protected override GeneratedMessage.FieldAccessorTable InternalGetFieldAccessorTable()
				{
					return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_fieldAccessorTable.EnsureFieldAccessorsInitialized(typeof(ConcatVectorProto.ConcatVector), typeof(ConcatVectorProto.ConcatVector.Builder));
				}

				private Builder()
				{
					// Construct using edu.stanford.nlp.loglinear.model.proto.ConcatVectorProto.ConcatVector.newBuilder()
					MaybeForceBuilderInitialization();
				}

				private Builder(GeneratedMessage.IBuilderParent parent)
					: base(parent)
				{
					MaybeForceBuilderInitialization();
				}

				private void MaybeForceBuilderInitialization()
				{
					if (GeneratedMessage.alwaysUseFieldBuilders)
					{
						GetComponentFieldBuilder();
					}
				}

				private static ConcatVectorProto.ConcatVector.Builder Create()
				{
					return new ConcatVectorProto.ConcatVector.Builder();
				}

				public override MessageLite.IBuilder Clear()
				{
					base.Clear();
					if (componentBuilder_ == null)
					{
						component_ = Java.Util.Collections.EmptyList();
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
					}
					else
					{
						componentBuilder_.Clear();
					}
					return this;
				}

				public override AbstractMessageLite.Builder Clone()
				{
					return Create().MergeFrom(((ConcatVectorProto.ConcatVector)BuildPartial()));
				}

				public override Descriptors.Descriptor GetDescriptorForType()
				{
					return ConcatVectorProto.internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor;
				}

				public override IMessageLite GetDefaultInstanceForType()
				{
					return ConcatVectorProto.ConcatVector.GetDefaultInstance();
				}

				public override IMessageLite Build()
				{
					ConcatVectorProto.ConcatVector result = ((ConcatVectorProto.ConcatVector)BuildPartial());
					if (!result.IsInitialized())
					{
						throw NewUninitializedMessageException(result);
					}
					return result;
				}

				public override IMessageLite BuildPartial()
				{
					ConcatVectorProto.ConcatVector result = new ConcatVectorProto.ConcatVector(this);
					int from_bitField0_ = bitField0_;
					if (componentBuilder_ == null)
					{
						if (((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
						{
							component_ = Java.Util.Collections.UnmodifiableList(component_);
							bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
						}
						result.component_ = component_;
					}
					else
					{
						result.component_ = componentBuilder_.Build();
					}
					OnBuilt();
					return result;
				}

				public override ConcatVectorProto.ConcatVector.Builder MergeFrom(IMessage other)
				{
					if (other is ConcatVectorProto.ConcatVector)
					{
						return MergeFrom((ConcatVectorProto.ConcatVector)other);
					}
					else
					{
						base.MergeFrom(other);
						return this;
					}
				}

				public ConcatVectorProto.ConcatVector.Builder MergeFrom(ConcatVectorProto.ConcatVector other)
				{
					if (other == ConcatVectorProto.ConcatVector.GetDefaultInstance())
					{
						return this;
					}
					if (componentBuilder_ == null)
					{
						if (!other.component_.IsEmpty())
						{
							if (component_.IsEmpty())
							{
								component_ = other.component_;
								bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
							}
							else
							{
								EnsureComponentIsMutable();
								Sharpen.Collections.AddAll(component_, other.component_);
							}
							OnChanged();
						}
					}
					else
					{
						if (!other.component_.IsEmpty())
						{
							if (componentBuilder_.IsEmpty())
							{
								componentBuilder_.Dispose();
								componentBuilder_ = null;
								component_ = other.component_;
								bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
								componentBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? GetComponentFieldBuilder() : null;
							}
							else
							{
								componentBuilder_.AddAllMessages(other.component_);
							}
						}
					}
					this.MergeUnknownFields(other.GetUnknownFields());
					return this;
				}

				public sealed override bool IsInitialized()
				{
					for (int i = 0; i < GetComponentCount(); i++)
					{
						if (!GetComponent(i).IsInitialized())
						{
							return false;
						}
					}
					return true;
				}

				/// <exception cref="System.IO.IOException"/>
				public override AbstractMessageLite.Builder MergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
				{
					ConcatVectorProto.ConcatVector parsedMessage = null;
					try
					{
						parsedMessage = Parser.ParsePartialFrom(input, extensionRegistry);
					}
					catch (InvalidProtocolBufferException e)
					{
						parsedMessage = (ConcatVectorProto.ConcatVector)e.GetUnfinishedMessage();
						throw;
					}
					finally
					{
						if (parsedMessage != null)
						{
							MergeFrom(parsedMessage);
						}
					}
					return this;
				}

				private int bitField0_;

				private IList<ConcatVectorProto.ConcatVector.Component> component_ = Java.Util.Collections.EmptyList();

				private void EnsureComponentIsMutable()
				{
					if (!((bitField0_ & unchecked((int)(0x00000001))) == unchecked((int)(0x00000001))))
					{
						component_ = new List<ConcatVectorProto.ConcatVector.Component>(component_);
						bitField0_ |= unchecked((int)(0x00000001));
					}
				}

				private RepeatedFieldBuilder<ConcatVectorProto.ConcatVector.Component, ConcatVectorProto.ConcatVector.Component.Builder, ConcatVectorProto.ConcatVector.IComponentOrBuilder> componentBuilder_;

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public IList<ConcatVectorProto.ConcatVector.Component> GetComponentList()
				{
					if (componentBuilder_ == null)
					{
						return Java.Util.Collections.UnmodifiableList(component_);
					}
					else
					{
						return componentBuilder_.GetMessageList();
					}
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public int GetComponentCount()
				{
					if (componentBuilder_ == null)
					{
						return component_.Count;
					}
					else
					{
						return componentBuilder_.GetCount();
					}
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Component GetComponent(int index)
				{
					if (componentBuilder_ == null)
					{
						return component_[index];
					}
					else
					{
						return componentBuilder_.GetMessage(index);
					}
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder SetComponent(int index, ConcatVectorProto.ConcatVector.Component value)
				{
					if (componentBuilder_ == null)
					{
						if (value == null)
						{
							throw new ArgumentNullException();
						}
						EnsureComponentIsMutable();
						component_.Set(index, value);
						OnChanged();
					}
					else
					{
						componentBuilder_.SetMessage(index, value);
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder SetComponent(int index, ConcatVectorProto.ConcatVector.Component.Builder builderForValue)
				{
					if (componentBuilder_ == null)
					{
						EnsureComponentIsMutable();
						component_.Set(index, ((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
						OnChanged();
					}
					else
					{
						componentBuilder_.SetMessage(index, ((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder AddComponent(ConcatVectorProto.ConcatVector.Component value)
				{
					if (componentBuilder_ == null)
					{
						if (value == null)
						{
							throw new ArgumentNullException();
						}
						EnsureComponentIsMutable();
						component_.Add(value);
						OnChanged();
					}
					else
					{
						componentBuilder_.AddMessage(value);
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder AddComponent(int index, ConcatVectorProto.ConcatVector.Component value)
				{
					if (componentBuilder_ == null)
					{
						if (value == null)
						{
							throw new ArgumentNullException();
						}
						EnsureComponentIsMutable();
						component_.Add(index, value);
						OnChanged();
					}
					else
					{
						componentBuilder_.AddMessage(index, value);
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder AddComponent(ConcatVectorProto.ConcatVector.Component.Builder builderForValue)
				{
					if (componentBuilder_ == null)
					{
						EnsureComponentIsMutable();
						component_.Add(((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
						OnChanged();
					}
					else
					{
						componentBuilder_.AddMessage(((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder AddComponent(int index, ConcatVectorProto.ConcatVector.Component.Builder builderForValue)
				{
					if (componentBuilder_ == null)
					{
						EnsureComponentIsMutable();
						component_.Add(index, ((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
						OnChanged();
					}
					else
					{
						componentBuilder_.AddMessage(index, ((ConcatVectorProto.ConcatVector.Component)builderForValue.Build()));
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder AddAllComponent<_T0>(IEnumerable<_T0> values)
					where _T0 : ConcatVectorProto.ConcatVector.Component
				{
					if (componentBuilder_ == null)
					{
						EnsureComponentIsMutable();
						AbstractMessageLite.Builder.AddAll(values, component_);
						OnChanged();
					}
					else
					{
						componentBuilder_.AddAllMessages(values);
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder ClearComponent()
				{
					if (componentBuilder_ == null)
					{
						component_ = Java.Util.Collections.EmptyList();
						bitField0_ = (bitField0_ & ~unchecked((int)(0x00000001)));
						OnChanged();
					}
					else
					{
						componentBuilder_.Clear();
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Builder RemoveComponent(int index)
				{
					if (componentBuilder_ == null)
					{
						EnsureComponentIsMutable();
						component_.Remove(index);
						OnChanged();
					}
					else
					{
						componentBuilder_.Remove(index);
					}
					return this;
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Component.Builder GetComponentBuilder(int index)
				{
					return GetComponentFieldBuilder().GetBuilder(index);
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.IComponentOrBuilder GetComponentOrBuilder(int index)
				{
					if (componentBuilder_ == null)
					{
						return component_[index];
					}
					else
					{
						return componentBuilder_.GetMessageOrBuilder(index);
					}
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public IList<ConcatVectorProto.ConcatVector.IComponentOrBuilder> GetComponentOrBuilderList()
				{
					if (componentBuilder_ != null)
					{
						return componentBuilder_.GetMessageOrBuilderList();
					}
					else
					{
						return Java.Util.Collections.UnmodifiableList(component_);
					}
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Component.Builder AddComponentBuilder()
				{
					return GetComponentFieldBuilder().AddBuilder(ConcatVectorProto.ConcatVector.Component.GetDefaultInstance());
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public ConcatVectorProto.ConcatVector.Component.Builder AddComponentBuilder(int index)
				{
					return GetComponentFieldBuilder().AddBuilder(index, ConcatVectorProto.ConcatVector.Component.GetDefaultInstance());
				}

				/// <summary><code>repeated .edu.stanford.nlp.loglinear.model.proto.ConcatVector.Component component = 1;</code></summary>
				public IList<ConcatVectorProto.ConcatVector.Component.Builder> GetComponentBuilderList()
				{
					return GetComponentFieldBuilder().GetBuilderList();
				}

				private RepeatedFieldBuilder<ConcatVectorProto.ConcatVector.Component, ConcatVectorProto.ConcatVector.Component.Builder, ConcatVectorProto.ConcatVector.IComponentOrBuilder> GetComponentFieldBuilder()
				{
					if (componentBuilder_ == null)
					{
						componentBuilder_ = new RepeatedFieldBuilder<ConcatVectorProto.ConcatVector.Component, ConcatVectorProto.ConcatVector.Component.Builder, ConcatVectorProto.ConcatVector.IComponentOrBuilder>(component_, ((bitField0_ & unchecked((int)(0x00000001
							))) == unchecked((int)(0x00000001))), GetParentForChildren(), IsClean());
						component_ = null;
					}
					return componentBuilder_;
				}
				// @@protoc_insertion_point(builder_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVector)
			}

			static ConcatVector()
			{
				defaultInstance = new ConcatVectorProto.ConcatVector(true);
				defaultInstance.InitFields();
			}
			// @@protoc_insertion_point(class_scope:edu.stanford.nlp.loglinear.model.proto.ConcatVector)
		}

		private static readonly Descriptors.Descriptor internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor;

		private static GeneratedMessage.FieldAccessorTable internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_fieldAccessorTable;

		private static readonly Descriptors.Descriptor internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor;

		private static GeneratedMessage.FieldAccessorTable internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_fieldAccessorTable;

		public static Descriptors.FileDescriptor GetDescriptor()
		{
			return descriptor;
		}

		private static Descriptors.FileDescriptor descriptor;

		static ConcatVectorProto()
		{
			string[] descriptorData = new string[] { "\n\x16ConcatVector.proto\x16&edu.stanford.nlp.l" + "oglinear.model.proto\"\xd6\x1\n\xeConcatVector\x16Q\n" + "\tcomponent\x1e\x1 \x3(\x84>.edu.stanford.nlp.logl" + "inear.model.proto.ConcatVector.Component"
				 + "\x20)\n\tComponent\x16\x10\n\x6sparse\x1e\x1 \x2(\xa\x16\xe\n\x4data\x1e\x2 " + "\x3(\x1B;\n&edu.stanford.nlp.loglinear.model." + "protoB\x15ConcatVectorProto" };
			Descriptors.FileDescriptor.IInternalDescriptorAssigner assigner = new _IInternalDescriptorAssigner_1285();
			Descriptors.FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[] {  }, assigner);
			internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor = GetDescriptor().GetMessageTypes()[0];
			internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor, new string[] { "Component" });
			internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor = internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_descriptor.GetNestedTypes()[0];
			internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_edu_stanford_nlp_loglinear_model_proto_ConcatVector_Component_descriptor, new string[]
				 { "Sparse", "Data" });
		}

		private sealed class _IInternalDescriptorAssigner_1285 : Descriptors.FileDescriptor.IInternalDescriptorAssigner
		{
			public _IInternalDescriptorAssigner_1285()
			{
			}

			public ExtensionRegistry AssignDescriptors(Descriptors.FileDescriptor root)
			{
				ConcatVectorProto.descriptor = root;
				return null;
			}
		}
		// @@protoc_insertion_point(outer_class_scope)
	}
}
