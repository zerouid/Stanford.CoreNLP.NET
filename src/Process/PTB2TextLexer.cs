/* The following code was generated by JFlex 1.5.1 */
using System;




namespace Edu.Stanford.Nlp.Process
{
	/// <summary>
	/// Undoes the more common cases of Penn Treebank quoting to producing
	/// something resembling normal text.
	/// </summary>
	/// <remarks>
	/// Undoes the more common cases of Penn Treebank quoting to producing
	/// something resembling normal text.  That is, it is an approximate inverse
	/// of PTBTokenizer.
	/// Jan 2008: This was both made better, and some quirky weird stuff was added
	/// so as to better handle the NIST MT08 translation system's output.
	/// </remarks>
	/// <author>Joseph Smarr</author>
	/// <author>Christopher Manning</author>
	internal class PTB2TextLexer
	{
		/// <summary>This character denotes the end of file</summary>
		public const int Yyeof = -1;

		/// <summary>initial size of the lookahead buffer</summary>
		private const int ZzBuffersize = 16384;

		/// <summary>lexical states</summary>
		public const int Yyinitial = 0;

		public const int Inquote = 2;

		/// <summary>
		/// ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
		/// ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
		/// at the beginning of a line
		/// l is of the form l = 2*k, k a non negative integer
		/// </summary>
		private static readonly int[] ZzLexstate = new int[] { 0, 0, 1, 1 };

		/// <summary>Translates characters to character classes</summary>
		private const string ZzCmapPacked = "\xc\x0\x1\x47\x2\x46\x1\x48\x16\x0\x1\x1\x1\x4b\x1\x2\x1\x0\x1\x6a" + "\x1\x69\x1\x3\x1\x1e\x1\x65\x1\x66\x2\x0\x1\x4b\x1\x23\x1\x4a\x1\x64" + "\x1\x43\x1\x22\xa\x42\x1\x4b\x1\x7\x3\x0\x1\x4c\x1\x0\x1\x4\x1\x3f"
			 + "\x1\x39\x1\x3d\x1\x33\x1\x2b\x1\xf\x1\x2f\x1\x25\x2\x21\x1\xe\x1\x5" + "\x1\x29\x1\xc\x1\x6\x1\xa\x1\x2d\x1\x1f\x1\xd\x1\xb\x1\x41\x1\x37" + "\x1\x21\x1\x35\x1\x21\x1\x0\x1\x4d\x3\x0\x1\x49\x1\x11\x1\x3e\x1\x38" + "\x1\x3c\x1\x32\x1\x2a\x1\x1b\x1\x2e\x1\x24\x2\x10\x1\x1a\x1\x14\x1\x28"
			 + "\x1\x18\x1\x15\x1\x16\x1\x2c\x1\x20\x1\x19\x1\x17\x1\x40\x1\x36\x1\x10" + "\x1\x34\x1\x10\x1\x67\x1\x0\x1\x68\x7\x0\x1\x46\x2c\x0\x1\x21\xc\x0" + "\x1\x21\x4\x0\x1\x21\x5\x0\x1b\x21\x1\x0\x25\x21\x1\x0\x46\x21\x2\x25" + "\x73\x21\x1\x1f\u0142\x21\x4\x0\xe\x21\x10\x0\x5\x21\x7\x0\x1\x21\x1\x0"
			 + "\x1\x21\xc9\x0\x5\x21\x1\x0\x2\x21\x2\x0\x4\x21\xa\x0\x1\x21\x1\x0" + "\x3\x21\x1\x0\x1\x21\x1\x0\x18\x21\x1\x0\x7b\x21\x1\x0\xd5\x21\xa\x0" + "\xec\x21\xb\x0\x2e\x21\x2\x0\x1\x21\x7\x0\x2f\x21\x6e\x0\x21\x21\x5\x0" + "\x3\x21\x37\x0\x35\x21\x19\x0\xc\x22\x4\x0\x2\x21\x1\x0\x8f\x21\x1\x0"
			 + "\x1\x21\x11\x0\x2\x21\x7\x0\x2\x21\xc\x22\x3\x21\x2\x0\x1\x21\x14\x0" + "\x1\x21\x1\x0\x24\x21\x23\x0\x83\x21\xd\x0\x1\x21\x10\x0\xc\x22\x29\x21" + "\xb\x0\x2\x21\x4\x0\x1\x21\x5\x0\x1a\x21\x4\x0\x1\x21\xb\x0\x1\x21" + "\x3\x0\x1\x21\x1b\x0\x1f\x21\x6b\x0\x1\x21\x1\x0\xd\x21\x7f\x0\x42\x21"
			 + "\x3\x0\x1\x21\x16\x0\x1\x21\x7\x0\xc\x21\x4\x0\xc\x22\x1\x0\x7\x21" + "\x1\x0\x7\x21\x5\x0\xa\x21\x2\x0\x2\x21\x2\x0\x1a\x21\x1\x0\x7\x21" + "\x1\x0\x1\x21\x3\x0\x4\x21\x3\x0\x1\x21\x14\x0\x1\x21\xf\x0\x2\x21" + "\x1\x0\x3\x21\x4\x0\xc\x22\x2\x21\x17\x0\x6\x21\x4\x0\x2\x21\x2\x0"
			 + "\x1a\x21\x1\x0\x7\x21\x1\x0\x2\x21\x1\x0\x2\x21\x1\x0\x2\x21\x25\x0" + "\x4\x21\x1\x0\x1\x21\x7\x0\xc\x22\x2\x0\x3\x21\x14\x0\xb\x21\x1\x0" + "\x3\x21\x1\x0\x1a\x21\x1\x0\x7\x21\x1\x0\x2\x21\x1\x0\x5\x21\x3\x0" + "\x1\x21\x16\x0\x1\x21\x11\x0\x2\x21\x4\x0\xc\x22\x19\x0\xa\x21\x2\x0"
			 + "\x2\x21\x2\x0\x1a\x21\x1\x0\x7\x21\x1\x0\x2\x21\x1\x0\x5\x21\x3\x0" + "\x1\x21\x24\x0\x2\x21\x1\x0\x3\x21\x4\x0\xc\x22\x1\x0\x1\x21\x15\x0" + "\x1\x21\x1\x0\x6\x21\x3\x0\x3\x21\x1\x0\x4\x21\x3\x0\x2\x21\x1\x0" + "\x1\x21\x1\x0\x2\x21\x3\x0\x2\x21\x3\x0\x3\x21\x3\x0\xe\x21\x1a\x0"
			 + "\x1\x21\x19\x0\xc\x22\x19\x0\xa\x21\x1\x0\x3\x21\x1\x0\x1b\x21\x1\x0" + "\xc\x21\x1\x0\x5\x21\x3\x0\x1\x21\x20\x0\x2\x21\x6\x0\x2\x21\x4\x0" + "\xc\x22\x19\x0\xa\x21\x1\x0\x3\x21\x1\x0\x1b\x21\x1\x0\xc\x21\x1\x0" + "\x5\x21\x3\x0\x1\x21\x28\x0\x1\x21\x1\x0\x2\x21\x4\x0\xc\x22\x1\x0"
			 + "\x2\x21\x16\x0\xa\x21\x1\x0\x3\x21\x1\x0\x33\x21\x2\x0\x1\x21\x14\x0" + "\x1\x21\x15\x0\x2\x21\x4\x0\xc\x22\xc\x0\x6\x21\x5\x0\x16\x21\x3\x0" + "\x1e\x21\x1\x0\xb\x21\x1\x0\x1\x21\x2\x0\x7\x21\x48\x0\x3c\x21\x1\x0" + "\x2\x21\xe\x0\x7\x21\xb\x0\xc\x22\x2f\x0\x2\x21\x1\x0\x1\x21\x2\x0"
			 + "\x2\x21\x1\x0\x1\x21\x2\x0\x1\x21\x6\x0\x4\x21\x1\x0\x7\x21\x1\x0" + "\x3\x21\x1\x0\x1\x21\x1\x0\x1\x21\x2\x0\x2\x21\x1\x0\x4\x21\x1\x0" + "\x2\x21\xb\x0\x1\x21\x2\x0\x5\x21\x1\x0\x1\x21\xb\x0\xc\x22\x2\x0" + "\x4\x21\x28\x0\x1\x21\x25\x0\xc\x22\x1a\x0\xa\x21\x1\x0\x2c\x21\x21\x0"
			 + "\x5\x21\xa3\x0\x35\x21\x18\x0\x1\x21\xc\x22\x6\x0\x6\x21\x4\x0\x4\x21" + "\x3\x0\x1\x21\x3\x0\x2\x21\x7\x0\x3\x21\x4\x0\xf\x21\xe\x0\x1\x21" + "\x1\x0\xc\x22\x6\x0\x2e\x21\x1\x0\x1\x21\x5\x0\x1\x21\x2\x0\x35\x21" + "\x1\x0\u014d\x21\x1\x0\x4\x21\x2\x0\x7\x21\x1\x0\x1\x21\x1\x0\x4\x21"
			 + "\x2\x0\x33\x21\x1\x0\x4\x21\x2\x0\x29\x21\x1\x0\x4\x21\x2\x0\x7\x21" + "\x1\x0\x1\x21\x1\x0\x4\x21\x2\x0\x11\x21\x1\x0\x47\x21\x1\x0\x4\x21" + "\x2\x0\x67\x21\x2d\x0\x14\x21\x14\x0\x7d\x21\xe\x0\u026c\x21\x2\x0\x15\x21" + "\x1\x0\x20\x21\x5\x0\x71\x21\x19\x0\xf\x21\x1\x0\x4\x21\x10\x0\x16\x21"
			 + "\x10\x0\x16\x21\x10\x0\xf\x21\x1\x0\x3\x21\x11\x0\x40\x21\x2b\x0\x1\x21" + "\x4\x0\x1\x21\x3\x0\xc\x22\x2e\x0\xc\x22\x6\x0\x82\x21\xa\x0\x33\x21" + "\x1\x0\x1\x21\x5\x0\x6a\x21\xc\x0\x23\x21\x33\x0\xc\x22\x24\x21\x2\x0" + "\x5\x21\xd\x0\x36\x21\x19\x0\x7\x21\xa\x0\xc\x22\x2e\x0\x1b\x21\xb\x0"
			 + "\x41\x21\x35\x0\xc\x22\x6\x0\xc\x22\xf\x0\x1\x21\x87\x0\x39\x21\x15\x0" + "\x7\x21\x4\x0\xc\x22\x33\x0\x24\x21\xf\x0\x2\x21\xc\x22\x36\x21\x20\x0" + "\x2c\x21\x22\x0\xc\x22\x3\x0\x3\x21\xc\x22\x2c\x21\x99\x0\x4\x21\x1\x0" + "\x4\x21\x3\x0\x2\x21\xb\x0\x12c\x21\x64\x0\u0116\x21\x2\x0\x6\x21\x2\x0"
			 + "\x2e\x21\x2\x0\x6\x21\x2\x0\xa\x21\x1\x0\x1\x21\x1\x0\x1\x21\x1\x0" + "\x1\x21\x1\x0\x25\x21\x2\x0\x41\x21\x1\x0\x7\x21\x1\x0\x1\x21\x3\x0" + "\x3\x21\x1\x0\x7\x21\x3\x0\x4\x21\x2\x0\x6\x21\x4\x0\xf\x21\x5\x0" + "\x3\x21\x1\x0\x7\x21\x35\x0\x2\x46\x6b\x0\x1\x21\xf\x0\x1\x21\x14\x0"
			 + "\xf\x21\x91\x0\x1\x21\x4\x0\x1\x21\x2\x0\xc\x21\x1\x0\x1\x21\x3\x0" + "\x5\x21\x6\x0\x1\x21\x1\x0\x1\x21\x1\x0\x1\x21\x1\x0\x4\x21\x1\x0" + "\xd\x21\x2\x0\x4\x21\x5\x0\x5\x21\x4\x0\x1\x21\x40\x0\x2\x21\u0a7b\x0" + "\x39\x21\x1\x0\x39\x21\x1\x0\xcd\x21\x6\x0\x4\x21\x3\x0\x2\x21\xe\x0"
			 + "\x2e\x21\x1\x0\x1\x21\x5\x0\x1\x21\x2\x0\x46\x21\x7\x0\x1\x21\x14\x0" + "\x1b\x21\xb\x0\x7\x21\x1\x0\x7\x21\x1\x0\x7\x21\x1\x0\x7\x21\x1\x0" + "\x7\x21\x1\x0\x7\x21\x1\x0\x7\x21\x1\x0\x7\x21\x78\x0\x1\x21\u01d5\x0" + "\x2\x21\x34\x0\x5\x21\x5\x0\x2\x21\x4\x0\x7e\x21\x6\x0\x3\x21\x1\x0"
			 + "\x84\x21\x1\x0\x4\x21\x5\x0\x33\x21\x3\x0\x88\x21\x15\x0\x21\x21\x41\x0" + "\x14\x21\u0200\x0\u19b6\x21\x70\x0\u51cd\x21\x3f\x0\u048d\x21\x67\x0\x38\x21\x2\x0" + "\u010d\x21\x3\x0\x14\x21\xc\x22\x2\x21\x18\x0\x39\x21\x14\x0\x1f\x21\xa\x0"
			 + "\x6a\x21\x3d\x0\xb\x21\x2\x0\x93\x21\x2\x0\x4\x21\x1\x0\x4\x21\xe\x0" + "\xd\x21\x73\x0\xc\x21\x1\x0\x3\x21\x1\x0\x4\x21\x1\x0\x1b\x21\x23\x0" + "\x40\x21\x10\x0\x3e\x21\x22\x0\xc\x22\x1e\x0\x6\x21\x3\x0\x1\x21\x4\x0" + "\xc\x22\x22\x21\xc\x0\x1b\x21\x1f\x0\x23\x21\x7\x0\x39\x21\x22\x0\x1\x21"
			 + "\xc\x22\x2e\x0\x33\x21\x1b\x0\x3\x21\x1\x0\xa\x21\x4\x0\xc\x22\x6\x0" + "\x1b\x21\x3\x0\x1\x21\x5\x0\x3c\x21\x1\x0\x1\x21\x3\x0\x2\x21\x2\x0" + "\x5\x21\x2\x0\x1\x21\x1\x0\x1\x21\x1e\x0\x3\x21\x2\x0\xd\x21\x7\x0" + "\x3\x21\xe\x0\x6\x21\x2\x0\x6\x21\x2\x0\x6\x21\xb\x0\x7\x21\x1\x0"
			 + "\x7\x21\xdd\x0\x2b\x21\xf\x0\xc\x22\x6\x0\u2ba4\x21\xe\x0\x1b\x21\x4\x0" + "\x3d\x21\u2104\x0\u016e\x21\x2\x0\x98\x21\x2e\x0\x7\x21\xe\x0\x5\x21\x5\x0" + "\x1\x21\x1\x0\xc\x21\x1\x0\xf\x21\x1\x0\x5\x21\x1\x0\x1\x21\x1\x0" + "\x2\x21\x1\x0\x2\x21\x1\x0\x9a\x21\x29\x0\u016b\x21\x16\x0\x64\x21\x2\x0"
			 + "\x42\x21\x32\x0\xe\x21\xa4\x0\x5\x21\x1\x0\xcf\x21\x17\x0\xc\x22\x7\x0" + "\x20\x21\x6\x0\x20\x21\xd\x0\x83\x21\x3\x0\x6\x21\x2\x0\x6\x21\x2\x0" + "\x6\x21\x2\x0\x3\x21\x2b\x0";

		/// <summary>Translates characters to character classes</summary>
		private static readonly char[] ZzCmap = ZzUnpackCMap(ZzCmapPacked);

		/// <summary>Translates DFA states to action switch labels.</summary>
		private static readonly int[] ZzAction = ZzUnpackAction();

		private const string ZzActionPacked0 = "\x2\x0\x2\x1\x1\x2\x1\x3\xb\x1\x1\x4\x1\x1\x2\x5" + "\x4\x1\x1\x6\x1\x3\x2\x0\x1\x7\x3\x0\x2\x7\x1\xa" + "\x1\xb\x1\xc\x7\x0\xa\x1\x1\xd\x1\x1\x1\xe\x1\xf" + "\x1\x10\x1\x11\x1\x6\x4\x0\x2\x14\x3\x0\x1\x15\x6\x0"
			 + "\x1\x16\x7\x0\xd\x1\x1\x17\x6\x0\x1\x18\x4\x0\x1\x19" + "\x5\x0\x1\x3\x2\x0\x1\x1a\x1\x0\x1\x1b\x7\x0\x2\x1" + "\x1\x0\x2\x1\x1\x0\x5\x1\x5\x0\x1\x3\x5\x0\x1\x1e" + "\x3\x0\x2\x3\x1\x2\x4\x0\xf\x1f\x1\x0\x1\x1\x1\x0" + "\x4\x1\x4\x0\x2\x3\x1\x6\xa\x0\x1\x2\x1\x0\x1\x20"
			 + "\x2\x21\x1\x0\x1\x20\x5\x1f\x1\x0\x14\x1f\x1\x0\x1\x1" + "\x1\x0\x3\x1\x3\x0\x1\x6\x3\x0\x1\x6\x5\x0\x1\x22" + "\x2\x0\xc\x1f\x1\x0\x1\x1\x1\x1f\x1\x0\x2\x1\x1\x23" + "\x1\x0\x1\x6\x3\x0\x5\x1f\x1\x24\x2\x1\x4\x1f\x1\x1" + "\x1\x0\x1\x1f\x1\x1\x1\x0\x1\x1f\x1\x1\x1\x0\x1\x1f"
			 + "\x1\x1\x1\x1f\x16\x1";

		private static int[] ZzUnpackAction()
		{
			int[] result = new int[306];
			int offset = 0;
			offset = ZzUnpackAction(ZzActionPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAction(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>Translates a state to a row index in the transition table</summary>
		private static readonly int[] ZzRowmap = ZzUnpackRowMap();

		private const string ZzRowmapPacked0 = "\x0\x0\x0\x6b\x0\xd8\x0\x145\x0\u011c\x0\u0163\x0\u01aa\x0\u01f1" + "\x0\u0238\x0\u027f\x0\u02c6\x0\u030d\x0\u0354\x0\u039b\x0\u03e2\x0\u0429" + "\x0\u0470\x0\u04b7\x0\u0429\x0\u04fe\x0\u0545\x0\u058c\x0\u05d3\x0\u0429"
			 + "\x0\u061a\x0\u0661\x0\u06a8\x0\u0429\x0\u06ef\x0\u0736\x0\u077d\x0\u07c4" + "\x0\u080b\x0\u0429\x0\u0429\x0\u0429\x0\u0852\x0\u0899\x0\u08e0\x0\u0927" + "\x0\u096e\x0\u09b5\x0\u09fc\x0\u0a43\x0\u0a8a\x0\u0ad1\x0\u0b18\x0\u0b5f" + "\x0\u0ba6\x0\u0bed\x0\u0c34\x0\u0429\x0\u0c7b\x0\u0429\x0\u0429\x0\u0429"
			 + "\x0\u0429\x0\u0661\x0\u0cc2\x0\u0d09\x0\u0d50\x0\u0d97\x0\u0429\x0\u0dde" + "\x0\u0e25\x0\u0e6c\x0\u0eb3\x0\u0429\x0\u0efa\x0\u0f41\x0\u0f88\x0\u04b7" + "\x0\u0fcf\x0\u1016\x0\u0429\x0\u105d\x0\u10a4\x0\u10eb\x0\u1132\x0\u1179" + "\x0\u11c0\x0\u1207\x0\u124e\x0\u1295\x0\u12dc\x0\u1323\x0\u136a\x0\u13b1"
			 + "\x0\u13f8\x0\u143f\x0\u1486\x0\u14cd\x0\u1514\x0\u0429\x0\u155b\x0\u15a2" + "\x0\u15e9\x0\u1630\x0\u1677\x0\u16be\x0\u0429\x0\u1705\x0\u174c\x0\u1793" + "\x0\u17da\x0\u0429\x0\u1821\x0\u1868\x0\u18af\x0\u18f6\x0\u193d\x0\u1984" + "\x0\u19cb\x0\u1a12\x0\u0429\x0\u1a59\x0\u0429\x0\u1aa0\x0\u1ae7\x0\u1b2e"
			 + "\x0\u1b75\x0\u1bbc\x0\u1c03\x0\u1c4a\x0\u1c91\x0\u1cd8\x0\u1d1f\x0\u1d66" + "\x0\u1dad\x0\u1df4\x0\u1e3b\x0\u1e82\x0\u1ec9\x0\u1f10\x0\u1f57\x0\u1f9e" + "\x0\u1fe5\x0\u202c\x0\u2073\x0\u20ba\x0\u2101\x0\u2148\x0\u218f\x0\u21d6" + "\x0\u221d\x0\u2264\x0\u0429\x0\u22ab\x0\u22f2\x0\u2339\x0\u2380\x0\u23c7"
			 + "\x0\u240e\x0\u2455\x0\u249c\x0\u24e3\x0\u252a\x0\u2571\x0\u25b8\x0\u25ff" + "\x0\u2646\x0\u268d\x0\u26d4\x0\u271b\x0\u2762\x0\u27a9\x0\u27f0\x0\u2837" + "\x0\u287e\x0\u28c5\x0\u290c\x0\u2953\x0\u299a\x0\u29e1\x0\u2a28\x0\u2a6f" + "\x0\u2ab6\x0\u2afd\x0\u2b44\x0\u2b8b\x0\u2bd2\x0\u2c19\x0\u2c60\x0\u2ca7"
			 + "\x0\u2cee\x0\u2d35\x0\u2d7c\x0\u2dc3\x0\u2e0a\x0\u2e51\x0\u23c7\x0\u2e98" + "\x0\u2edf\x0\u2f26\x0\u0429\x0\u0429\x0\u2f6d\x0\u2fb4\x0\u2ffb\x0\u3042" + "\x0\u3089\x0\u30d0\x0\u3117\x0\u315e\x0\u2ffb\x0\u31a5\x0\u31ec\x0\u3233" + "\x0\u327a\x0\u32c1\x0\u3308\x0\u334f\x0\u3396\x0\u33dd\x0\u3424\x0\u346b"
			 + "\x0\u34b2\x0\u34f9\x0\u3540\x0\u3587\x0\u35ce\x0\u3615\x0\u365c\x0\u36a3" + "\x0\u36ea\x0\u3731\x0\u3778\x0\u37bf\x0\u3806\x0\u384d\x0\u3894\x0\u38db" + "\x0\u2c60\x0\u3922\x0\u3969\x0\u39b0\x0\u39f7\x0\u3a3e\x0\u3a85\x0\u3acc" + "\x0\u0429\x0\u3b13\x0\u3b5a\x0\u3ba1\x0\u3be8\x0\u3c2f\x0\u3c76\x0\u3cbd"
			 + "\x0\u3d04\x0\u3d4b\x0\u3d92\x0\u3dd9\x0\u3e20\x0\u3e67\x0\u3eae\x0\u3ef5" + "\x0\u3f3c\x0\u3f83\x0\u3fca\x0\u0429\x0\u4011\x0\u4058\x0\u409f\x0\u40e6" + "\x0\u412d\x0\u4174\x0\u41bb\x0\u4202\x0\u4249\x0\u4290\x0\u0429\x0\u42d7" + "\x0\u431e\x0\u4365\x0\u43ac\x0\u43f3\x0\u443a\x0\u4481\x0\u44c8\x0\u450f"
			 + "\x0\u4556\x0\u459d\x0\u45e4\x0\u462b\x0\u4672\x0\u46b9\x0\u4700\x0\u4672" + "\x0\u4747\x0\u478e\x0\u47d5\x0\u481c\x0\u4863\x0\u48aa\x0\u48f1\x0\u4938" + "\x0\u497f\x0\u49c6\x0\u4a0d\x0\u4a54\x0\u4a9b\x0\u4ae2\x0\u4b29\x0\u4b70" + "\x0\u4bb7\x0\u4bfe";

		private static int[] ZzUnpackRowMap()
		{
			int[] result = new int[306];
			int offset = 0;
			offset = ZzUnpackRowMap(ZzRowmapPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackRowMap(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int high = packed[i++] << 16;
				result[j++] = high | packed[i++];
			}
			return j;
		}

		/// <summary>The transition table of the DFA</summary>
		private static readonly int[] ZzTrans = ZzUnpackTrans();

		private const string ZzTransPacked0 = "\x1\x3\x1\x4\x1\x5\x1\x6\x3\x7\x1\x3\x6\x7\xc\xa" + "\x1\x3\x1\xb\x1\xc\x2\x7\x1\xd\x1\xa\x1\x7\x1\xa" + "\x1\x7\x1\xa\x1\x7\x1\xa\x1\x7\x1\xe\x1\xf\x1\xa" + "\x1\x7\x1\xa\x1\x7\x1\xa\x1\x7\x1\x10\x1\x11\x1\xa"
			 + "\x1\x7\x1\xa\x1\x7\x1\xa\x3\x7\x1\x3\x1\x14\x1\x3" + "\x1\x15\x3\x3\x1\x16\x1\x17\x1\x18\x1\x3\x1\x19\x2\x3" + "\x1\x1a\x1\x3\x1\x1b\x1\x1e\x1\x1f\x3\x7\x1\x3\x6\x7" + "\xc\xa\x1\x3\x1\xb\x1\xc\x2\x7\x1\xd\x1\xa\x1\x7" + "\x1\xa\x1\x7\x1\xa\x1\x7\x1\xa\x1\x7\x1\xe\x1\xf"
			 + "\x1\xa\x1\x7\x1\xa\x1\x7\x1\xa\x1\x7\x1\x10\x1\x11" + "\x1\xa\x1\x7\x1\xa\x1\x7\x1\xa\x3\x7\x1\x3\x1\x14" + "\x1\x3\x1\x15\x3\x3\x1\x16\x1\x17\x1\x18\x1\x3\x1\x19" + "\x2\x3\x1\x1a\x1\x3\x3\x0\x41\x3\x1\x0\x5\x3\x2\x0" + "\x6\x3\x2\x0\x1\x20\x1\x21\x3\x0\x1\x22\x14\x0\x1\x23"
			 + "\x4\x0\x1\x24\x2\x0\x2\x25\x20\x0\x1\x28\x1\x22\x1\x29" + "\x3\x0\x1\x2a\x1\x0\x1\x2b\x1\x2c\x2\x0\x1\x2d\x6a\x0" + "\x1\x2e\x2\x0\x1\x2f\x3\x0\x1\x32\x3\x0\x1\x33\x1\x34" + "\x1\x0\x1\x2f\x2\x0\x1\x32\x3\x0\x1\x33\x1\x34\x39\x0" + "\x1\x3\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7"
			 + "\x1\x3\x20\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35" + "\x2\x0\x3\x7\x1\x3\x6\x7\xc\x36\x1\x3\x1\x7\x1\x36" + "\x2\x7\x1\x3\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7"
			 + "\x1\x36\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35" + "\x2\x0\x1\x37\x2\x7\x1\x3\x7\x7\x1\x37\xa\x7\x1\x3" + "\x4\x7\x1\x3\x20\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\x35\x2\x0\x1\x37\x2\x7\x1\x3\x6\x7\x1\x36\x1\x38" + "\xa\x36\x1\x3\x1\x7\x1\x36\x2\x7\x1\x3\x1\x36\x1\x7"
			 + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x3\x7\x1\x3\x1\x0" + "\x5\x3\x2\x0\x7\x3\x3\x0\xa\x3\x1\x39\xb\x3\x1\x39" + "\x2a\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\x36\x1\x3\x1\x7\x1\x36\x2\x7\x1\x3" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x3c\x1\x3d\x1\x36\x1\x7\x1\x36\x1\x7" + "\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7"
			 + "\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3\xc\x7\x2\x3d\x10\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x1\x3e" + "\x2\x7\x1\x3\x6\x7\x1\x36\x1\x3f\xa\x36\x1\x3\x1\x7" + "\x1\x36\x2\x7\x1\x3\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36" + "\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36"
			 + "\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36\x1\x7\x1\x36" + "\x1\x7\x1\x36\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\x35\x2\x0\x1\x3e\x2\x7\x1\x3\x7\x7\x1\x3e\xa\x7" + "\x1\x3\x4\x7\x1\x3\x20\x7\x1\x3\x1\x0\x5\x3\x2\x0" + "\x6\x3\x6b\x0\x1\x3\x1\x40\x2\x0\x41\x3\x1\x0\x1\x3"
			 + "\x1\x41\x3\x3\x2\x0\x6\x3\x64\x0\x1\x42\x6\x0\x1\x3" + "\x1\x43\x2\x0\x41\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x46" + "\x2\x0\x41\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x47\x2\x0" + "\x41\x3\x1\x0\x5\x3\x2\x0\x6\x3\x2\x0\x1\x48\x1\x49" + "\x3\x0\x1\x22\x14\x0\x1\x23\x4\x0\x1\x24\x2\x0\x2\x25"
			 + "\x20\x0\x1\x28\x1\x22\x1\x29\x3\x0\x1\x2a\x1\x0\x1\x2b" + "\x1\x2c\x2\x0\x1\x4a\x2\x0\x1\x4b\x3\x0\x1\x4c\x3\x0" + "\x1\x33\x1\x34\x1\x0\x1\x4b\x2\x0\x1\x4c\x3\x0\x1\x33" + "\x1\x34\x93\x0\x2\x4d\x1\x64\xf\x0\x1\x65\x2\x0\x1\x66" + "\x3\x0\x1\x67\x6\x0\x1\x66\x2\x0\x1\x67\x40\x0\x1e\x22"
			 + "\x1\x68\x28\x22\x1\x0\xf\x22\x2c\x0\x2\x69\x47\x0\x1\x6a" + "\x98\x0\x1\x6b\x6f\x0\x1\x6e\xb\x0\x1\x6f\x1\x70\x3\x71" + "\x1\x0\x14\x71\x1\x0\x3\x71\x2\x0\x1e\x71\x19\x0\x1\x72" + "\x3\x0\x1\x32\x6\x0\x1\x72\x2\x0\x1\x32\x47\x0\x1\x73" 
			+ "\xc\x0\x1\x73\x4d\x0\x1\x74\xb\x0\x1\x74\x4c\x0\x1\x75" + "\xb\x0\x1\x75\x4a\x0\x1\x78\xb\x0\x1\x78\x6f\x0\x1\x79" + "\x4\x0\x1\x7a\x33\x0\x1\x3\x1\x35\x2\x0\x3\x7\x1\x3" + "\x6\x7\xc\x7b\x1\x3\x1\x7\x1\x7b\x2\x7\x1\x3\x1\x7b" + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b"
			 + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b" + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x3\x7\x1\x3" + "\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7\x1\x3" + "\x14\x7\x1\x3\x4\x7\x1\x3\x2\x7c\xc\x7\x2\x7d\xe\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\x7b\x1\x3\x1\x7\x1\x7b\x2\x7\x1\x3" + "\x1\x7e\x1\x7c\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7" + "\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7f\x1\x7d\x1\x7b\x1\x7" + "\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x3\x0\x28\x3\x2\x82"
			 + "\xa\x3\x2\x83\xb\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\x35" + "\x2\x0\x1\x84\x2\x7\x1\x3\x6\x7\x1\x7b\x1\x85\xa\x7b" + "\x1\x3\x1\x7\x1\x7b\x2\x7\x1\x3\x1\x7b\x1\x7\x1\x7b" + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b" + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b"
			 + "\x1\x7\x1\x7b\x1\x7\x1\x7b\x3\x7\x1\x3\x1\x0\x5\x3" + "\x2\x0\x7\x3\x1\x35\x2\x0\x1\x84\x2\x7\x1\x3\x7\x7" + "\x1\x84\xa\x7\x1\x3\x4\x7\x1\x3\x20\x7\x1\x3\x1\x0" + "\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7" + "\x1\x3\x4\x7\x1\x3\x2\x7\x2\x86\x1a\x7\x1\x3\x1\x0"
			 + "\x5\x3\x2\x0\x7\x3\x1\x35\x2\x0\x3\x7\x1\x3\x6\x7" + "\xc\x7b\x1\x3\x1\x7\x1\x7b\x2\x7\x1\x3\x1\x7b\x1\x7" + "\x1\x87\x1\x86\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7" + "\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x1\x7" + "\x1\x7b\x1\x7\x1\x7b\x1\x7\x1\x7b\x3\x7\x1\x3\x1\x0"
			 + "\x5\x3\x2\x0\x7\x3\x1\x88\x2\x0\x41\x3\x1\x0\x5\x3" + "\x2\x0\x6\x3\x1\x0\x1\x89\x2\x0\x1\x8c\x3\x0\x1\x8d" + "\x6\x0\x1\x8c\x2\x0\x1\x8d\x46\x0\x1\x8e\x3\x0\x1\x4c" + "\x6\x0\x1\x8e\x2\x0\x1\x4c\x47\x0\x1\x8f\xc\x0\x1\x8f" + "\x4d\x0\x1\x90\xb\x0\x1\x90\x9a\x0\x1\x91\x15\x0\x1\x66"
			 + "\x3\x0\x1\x67\x6\x0\x1\x66\x2\x0\x1\x67\x47\x0\x1\x92" + "\xc\x0\x1\x92\x4d\x0\x1\x93\xb\x0\x1\x93\x7f\x0\x2\x96" + "\xa\x0\x2\x97\x2a\x0\x1\x98\xb\x0\x1\x98\x9b\x0\x1\x22" + "\xd\x0\x1\x99\x6a\x0\x1\x9a\x2\x0\x1\x9b\x3\x0\x1\x9c" + "\x6\x0\x1\x9b\x2\x0\x1\x9c\x47\x0\x1\x9d\xc\x0\x1\x9d"
			 + "\x4a\x0\x1\xa0\xc\x0\x1\xa0\x4d\x0\x1\xa1\xb\x0\x1\xa1" + "\x3f\x0\x1\xa2\x5\x0\x1\xa3\x64\x0\x1\xa4\x5\x0\x1\xa5" + "\x70\x0\x1\xa6\xb\x0\x1\xa6\xc\x0\x2\xa7\x6\x0\x2\xaa" + "\x4\x0\x2\xab\x6\x0\x1\xac\x15\x0\x1\xad\x69\x0\x1\x3" + "\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\xaf\x1\x3\x1\x7"
			 + "\x1\xaf\x2\x7\x1\x3\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3"
			 + "\x16\x7\x2\xb0\x6\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xb1\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x2\xb0\x2\x7" + "\x1\x3\x2\xc8\x1e\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\xaf\x1\x3\x1\x7" + "\x1\xaf\x2\x7\x1\x3\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf"
			 + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xc9\x1\xb0\x1\xaf" + "\x1\x7\x1\xaf\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xca\x2\x0\x3\x7\x1\x3\x6\x7\xc\xaf\x1\x3\x1\xb0" + "\x1\xc9\x2\x7\x1\x3\x1\xcb\x1\xc8\x1\xaf\x1\x7\x1\xaf"
			 + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x3\x0\x38\x3\x2\xcc\x5\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x3\x0\x38\x3\x2\xcd\x5\x3\x1\x0\x5\x3\x2\x0\x7\x3"
			 + "\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3" + "\x16\x7\x2\xce\x6\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\xaf\x1\x3\x1\x7" + "\x1\xaf\x2\x7\x1\x3\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf"
			 + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xcf\x1\xce\x1\xaf" + "\x1\x7\x1\xaf\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xd2\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3" + "\x20\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xd3\x2\x0" + "\x3\x7\x1\x3\x6\x7\xc\xaf\x1\x3\x1\x7\x1\xaf\x2\x7"
			 + "\x1\x3\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf\x1\x7\x1\xaf" + "\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\x4\x0\x1\x8c" + "\x3\x0\x1\x8d\x6\x0\x1\x8c\x2\x0\x1\x8d\x47\x0\x1\xd4"
			 + "\xc\x0\x1\xd4\x4d\x0\x1\xd5\xb\x0\x1\xd5\x46\x0\x1\xd6" + "\xc\x0\x1\xd6\x4a\x0\x1\xd7\xc\x0\x1\xd7\x4d\x0\x1\xd8" + "\xb\x0\x1\xd8\x46\x0\x1\xd9\xc\x0\x1\xd9\x4d\x0\x1\xdc" + "\xb\x0\x1\xdc\x90\x0\x2\xdd\x69\x0\x2\xde\x1b\x0\x3\xdf" + 
			"\x1\x0\x14\xdf\x1\x0\x3\xdf\x2\x0\x1e\xdf\x19\x0\x1\x9b" + "\x3\x0\x1\x9c\x6\x0\x1\x9b\x2\x0\x1\x9c\x47\x0\x1\xe0" + "\xc\x0\x1\xe0\x4d\x0\x1\xe1\xb\x0\x1\xe1\x47\x0\x1\xe2" + "\xc\x0\x1\xe2\x42\x0\x1\xe3\x5\x0\x1\xe6\x70\x0\x1\xe7" + "\xb\x0\x1\xe7\x46\x0\x1\xa3\x6a\x0\x1\xa5\x87\x0\x2\xe8"
			 + "\x4d\x0\x1\xe9\x3f\x0\x1\xe9\xc\x0\x1\xe9\x48\x0\x1\xea" + "\xc\x0\x1\xea\x9c\x0\x1\xeb\x17\x0\x1\xec\x2\xed\x1\x0" + "\x2\xed\x1\xf0\x1\xf1\x3\xed\x1\xec\x4\xed\x1\xf0\x1\xf1" + "\x2\xed\x1\x0\x2\xf2\x1\xed\x2\x0\x2\xf3\x2\xf4\x2\xf5" 
			+ "\x2\xf6\x2\xf7\x2\xed\x2\xfa\x2\xfb\x4\xed\x2\xfc\x2\xed" + "\x33\x0\x1\xfd\x4\x0\x1\x7a\x33\x0\x1\x3\x1\xae\x2\x0" + "\x3\x7\x1\x3\x6\x7\xc\xfe\x1\x3\x1\x7\x1\xfe\x2\x7" + "\x1\x3\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe"
			 + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xb1\x2\x0" + "\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3\x20\x7\x1\x3" + "\x1\x0\x5\x3\x2\x0\x6\x3\x1e\x0\x1\x79\x4\x0\x1\xff" + "\x33\x0\x1\x3\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3"
			 + "\x4\x7\x1\x3\x2\x7\x2\x100\x1a\x7\x1\x3\x1\x0\x5\x3" + "\x2\x0\x7\x3\x1\xca\x2\x0\x3\x7\x1\x3\x6\x7\xc\xfe" + "\x1\x3\x1\x7\x1\xfe\x2\x7\x1\x3\x1\xfe\x1\x7\x1\xfe" + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe"
			 + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x3\x7\x1\x3\x1\x0\x5\x3" + "\x2\x0\x6\x3\x1e\x0\x1\xfd\x4\x0\x1\xff\x33\x0\x1\x3" + "\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\xfe\x1\x3\x1\x7" + "\x1\xfe\x2\x7\x1\x3\x1\xfe\x1\x7\x1\x101\x1\x100\x1\xfe" + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe"
			 + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x1\x7\x1\xfe\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x3\x0\x1f\x3\x1\x18\x21\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x3\x0\x1f\x3\x1\x19\x21\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\x35\x2\x0\x3\x7\x1\x3\x4\x7\x1\x104\xb\x7\x1\x104"
			 + "\x1\x7\x1\x3\x4\x7\x1\x3\x20\x7\x1\x3\x1\x0\x5\x3" + "\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7\x1\x3\x4\x7\x1\x104" + "\x1\x7\xa\xfe\x1\x105\x1\xfe\x1\x3\x1\x7\x1\xfe\x2\x7" + "\x1\x3\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe"
			 + "\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe\x1\x7\x1\xfe" + "\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\x1e\x0\x1\x79" + "\x4\x0\x1\x7a\x2\x0\x2\x106\x4b\x0\x1\xfd\x4\x0\x1\x7a" + "\x2\x0\x2\x106\x35\x0\x1\x107\xc\x0\x1\x107\x4d\x0\x1\x108" + "\xb\x0\x1\x108\x46\x0\x1\x109\xc\x0\x1\x109\x42\x0\x1\x10a"
			 + "\x5\x0\x1\x10b\x70\x0\x1\x10e\xb\x0\x1\x10e\x3e\x0\x1\x10f" + "\x5\x0\x1\x110\x70\x0\x1\x111\xb\x0\x1\x111\x74\x0\x1\x2a" + "\x6a\x0\x1\x2b\x39\x0\x1\x112\xc\x0\x1\x112\x4d\x0\x1\x113" + "\xb\x0\x1\x113\x3f\x0\x1\x114\x5\x0\x1\x115\x6a\x0\x1\xe6"
			 + "\x64\x0\x1\x12c\x6\x0\x1\x32\xb\x0\x1\x32\x41\x0\x1\x12d" + "\x5\x0\x1\x5\x71\x0\x1\x12e\xb\x0\x1\x12e\x3d\x0\x1\x12f" + "\x42\x0\x2\x130\x1\x131\x19\x0\x1\x132\xb\x0\x1\x132\x72\x0" + "\x2\xe9\x37\x0\x1\x133\x2\x0\x3\xed\x1\x0\x3\xed\x1\x136"
			 + "\xb\xed\x1\x136\x2\xed\x1\x0\x2\x136\x1\xed\x2\x0\x2\xed" + "\x2\x137\x2\x138\x2\x139\xa\xed\x2\x13a\x6\xed\x2\x0\x2\x130" + "\x1\x131\xf\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0"
			 + "\x14\xed\x1\x0\x3\xed\x2\x0\x2\xed\x2\x13c\x18\xed\x16\x0" + "\x1\x13b\x2\x0\x3\xed\x1\x0\x2\xed\x1\x136\xb\xed\x1\x136" + "\x3\xed\x1\x0\x3\xed\x2\x0\xa\xed\x2\x13d\x10\xed\x16\x0" + "\x1\x13b\x2\x0\x3\xed\x1\x0\x1\xed\x1\x140\x1\x141\xa\xed"
			 + "\x1\x140\x1\x141\x3\xed\x1\x0\x3\xed\x2\x0\xa\xed\x2\x142" + "\x10\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x2\x136\x1\xed\x2\x0\x2\xed\x2\x143\x18\xed\x16\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\xc\xed"
			 + "\x2\x144\xe\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x2\xed" + "\x1\x145\xb\xed\x1\x145\x3\xed\x1\x0\x3\xed\x2\x0\x1e\xed" + "\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed" + "\x2\x0\xc\xed\x2\x146\xe\xed\x16\x0\x1\x13b\x2\x0\x1\x147"
			 + "\x2\xed\x1\x0\x7\xed\x1\x147\xa\xed\x1\x0\x3\xed\x2\x0" + "\xc\xed\x2\x14a\xe\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0" + "\x2\xed\x1\x14b\xb\xed\x1\x14b\x3\xed\x1\x0\x3\xed\x2\x0" + "\x1e\xed\x16\x0\x1\x13b\x2\x0\x1\x14c\x2\xed\x1\x0\x2\xed"
			 + "\x1\x14d\x4\xed\x1\x14c\x4\xed\x1\x14d\x3\xed\x1\x0\x3\xed" + "\x2\x0\xa\xed\x2\x14e\x2\x14a\xe\xed\x16\x0\x1\x13b\x2\x0" + "\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\xc\xed\x2\x14f" + "\xe\xed\x16\x0\x1\x150\xb\x0\x1\xa6\xb\x0\x1\xa6\xc\x0"
			 + "\x2\xa7\x6\x0\x2\xaa\x4\x0\x2\xab\x6\x0\x1\xac\x14\x0" + "\x1\x3\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\x151\x1\x3" + "\x1\x7\x1\x151\x2\x7\x1\x3\x1\x151\x1\x7\x1\x151\x1\x7" + "\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7" + "\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7"
			 + "\x1\x151\x1\x7\x1\x151\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0" + "\x6\x3\x1\x0\x1\x154\x69\x0\x1\x3\x1\x35\x2\x0\x3\x7" + "\x1\x3\x5\x7\x1\xb0\xb\x7\x1\xb0\x1\x3\x4\x7\x1\x3" + "\x20\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0" + "\x3\x7\x1\x3\x5\x7\x1\xb0\xb\x151\x1\x155\x1\x3\x1\x7"
			 + "\x1\x151\x2\x7\x1\x3\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151" + "\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151" + "\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151" + "\x1\x7\x1\x151\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" +
			 "\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3" + "\x2\x156\x1e\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae" + "\x2\x0\x3\x7\x1\x3\x6\x7\xc\x151\x1\x3\x1\x7\x1\x151" + "\x2\x7\x1\x3\x1\x157\x1\x156\x1\x151\x1\x7\x1\x151\x1\x7" + "\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7"
			 + "\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7\x1\x151\x1\x7" + "\x1\x151\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\xc\x0" + "\x1\x158\xb\x0\x1\x158\x3f\x0\x1\x159\x5\x0\x1\x15a\x70\x0" + "\x1\x15b\xb\x0\x1\x15b\x3e\x0\x1\x15e\x5\x0\x1\x15f\x6a\x0"
			 + "\x1\x10b\x64\x0\x1\x160\x6\x0\x1\x4c\xb\x0\x1\x4c\x41\x0" + "\x1\x161\x5\x0\x1\x1e\x6a\x0\x1\x110\x64\x0\x1\x162\x6\x0" + "\x1\x67\xb\x0\x1\x67\x41\x0\x1\x163\x5\x0\x1\x20\x3c\x0" + "\x2\x4d\x1\x64\xf\x0\x1\x164\x5\x0\x1\x165\x70\x0\x1\x168"
			 + "\xb\x0\x1\x168\x46\x0\x1\x115\x6b\x0\x1\x32\xb\x0\x1\x32" + "\x41\x0\x1\x2d\x1\x6f\x1\x70\x3\x71\x1\x5\x14\x71\x1\x0" + "\x3\x71\x2\x0\x1e\x71\x16\x0\x1\x12f\xc\x0\x1\xe9\xb\x0" + "\x1\xe9\x29\x0\x2\x130\x1\x131\x69\x0\x1\x169\x2e\x0\x2\x16a"
			 + "\x6f\x0\x1\x16b\x34\x0\x1\x133\x2\x0\x3\xed\x1\x0\x14\xed" + "\x1\x0\x3\xed\x2\x0\x1e\xed\x2\x0\x2\x130\x1\x131\xf\x0" + "\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0" + "\x16\xed\x2\x136\x4\xed\x16\x0\x1\x13b\x2\x0\x2\xed\x1\x136"
			 + "\x1\x0\x3\xed\x1\x16c\x5\xed\x1\x136\x3\xed\x1\x16c\x2\xed" + "\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\xc\xed\x2\x136\xe\xed" + "\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed"
			 + "\x2\x0\x14\xed\x2\x16d\x6\xed\x16\x0\x1\x133\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\xc\xed\x2\x136\xe\xed" + "\x2\x0\x2\x130\x1\x131\xf\x0\x1\x13b\x2\x0\x1\x16e\x2\xed" + "\x1\x0\x1\xed\x1\x14c\x1\x16f\x4\xed\x1\x16e\x3\xed\x1\x14c"
			 + "\x1\x16f\x3\xed\x1\x0\x3\xed\x2\x0\x2\x14c\xa\xed\x2\x172" + "\xe\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x3\xed\x2\x0\x14\xed\x2\x173\x6\xed\x16\x0\x1\x133\x2\x0" + "\x1\xed\x1\x139\x1\xed\x1\x0\xa\xed\x1\x139\x7\xed\x1\x0"
			 + "\x3\xed\x2\x0\x1e\xed\x2\x0\x2\x130\x1\x131\xf\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x2\xed\x1\x14d\xb\xed\x1\x14d\x3\xed" + "\x1\x0\x3\xed\x2\x0\xc\xed\x2\x136\xe\xed\x16\x0\x1\x133" + "\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x14\xed"
			 + "\x2\x174\x6\xed\x2\x0\x2\x130\x1\x131\xf\x0\x1\x13b\x2\x0" + "\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x10\xed\x2\x14c" + "\xa\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x3\xed\x2\x0\x6\xed\x2\x136\x14\xed\x16\x0\x1\x13b\x2\x0"
			 + "\x3\xed\x1\x0\x1\xed\x1\x175\xb\xed\x1\x175\x4\xed\x1\x0" + "\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0" + "\x14\xed\x1\x0\x2\x136\x1\xed\x2\x0\x1a\xed\x2\x139\x16\x0" + "\x1\x133\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0"
			 + "\x6\xed\x2\x139\x14\xed\x2\x0\x2\x130\x1\x131\xf\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x1\xed\x1\x136\xb\xed\x1\x136\x4\xed" + "\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x2\x136\x1\xed\x2\x0\x1e\xed\x16\x0"
			 + "\x1\x13b\x2\x0\x3\xed\x1\x0\x1\xed\x1\x176\xb\xed\x1\x176" + "\x4\xed\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0" + "\x3\xed\x1\x0\x2\xed\x1\x136\xb\xed\x1\x136\x3\xed\x1\x0" + "\x3\xed\x2\x0\x2\x140\x1a\xed\x16\x0\x1\x13b\x2\x0\x3\xed"
			 + "\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x4\xed\x2\x177\x16\xed" + "\x34\x0\x2\x178\x36\x0\x1\x3\x1\xae\x2\x0\x3\x7\x1\x3" + "\x6\x7\xc\x179\x1\x3\x1\x7\x1\x179\x2\x7\x1\x3\x1\x179" + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" 
			+ "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x3\x7\x1\x3" + "\x1\x0\x5\x3\x2\x0\x6\x3\x4\x0\x3\u0100\x1\x0\x14\u0100" + "\x1\x0\x3\u0100\x1\u0101\x1\x0\x1e\u0100\x2\u0101\x11\x0\x1\x3"
			 + "\x1\xca\x2\x0\x3\x7\x1\x3\x6\x7\xc\x179\x1\x3\x1\x7" + "\x1\x179\x2\x7\x1\x3\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" 
			+ "\x1\x7\x1\x179\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\x35\x2\x0\x3\x7\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3" + "\x2\x7\x2\u0102\x1a\x7\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3" + "\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\x179\x1\x3\x1\x7" + "\x1\x179\x2\x7\x1\x3\x1\x179\x1\x7\x1\u0103\x1\u0102\x1\x179"
			 + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" + "\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179\x1\x7\x1\x179" + "\x1\x7\x1\x179\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3" + "\xd\x0\x1\u0104\xb\x0\x1\u0104\x46\x0\x1\x15a\x64\x0\x1\u0105"
			 + "\x6\x0\x1\x8d\xb\x0\x1\x8d\x41\x0\x1\u0106\x5\x0\x1\x48" + "\x3c\x0\x2\x4d\x1\x64\x17\x0\x1\x15f\x6b\x0\x1\x4c\xb\x0" + "\x1\x4c\x49\x0\x1\x1e\x6b\x0\x1\x67\xb\x0\x1\x67\x49\x0" + "\x1\x20\x3c\x0\x2\x4d\x1\x64\x17\x0\x1\x165\x64\x0\x1\u0107"
			 + "\x6\x0\x1\x9c\xb\x0\x1\x9c\x41\x0\x1\u0108\x5\x0\x1\x6f" + "\x93\x0\x2\xe9\x24\x0\x1\u0109\x6a\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\xc\xed\x2\x145\xe\xed" + "\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x2\xed\x1\u010a\xb\xed"
			 + "\x1\u010a\x3\xed\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x3\xed\x1\x136\xb\xed\x1\x136\x2\xed" + "\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x2\x139\x1\xed\x2\x0\x1e\xed\x16\x0"
			 + "\x1\x133\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x2\x139\x1\xed" + "\x2\x0\x6\xed\x2\u010b\x4\xed\x2\x136\xc\xed\x2\x0\x2\x130" + "\x1\x131\xf\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x3\xed\x2\x0\xa\xed\x2\x136\x10\xed\x16\x0\x1\x13b\x2\x0"
			 + "\x3\xed\x1\x0\x4\xed\x1\u010c\xb\xed\x1\u010c\x1\xed\x1\x0" + "\x3\xed\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0" + "\x3\xed\x1\u010d\xb\xed\x1\u010d\x2\xed\x1\x0\x3\xed\x2\x0" + "\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x4\xed\x1\x137"
			 + "\xb\xed\x1\x137\x1\xed\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0" + "\x1\x13b\x2\x0\x3\xed\x1\x0\x2\xed\x1\u010e\xb\xed\x1\u010e" + "\x3\xed\x1\x0\x3\xed\x2\x0\x1e\xed\x16\x0\x1\u010f\x69\x0" + "\x1\x3\x1\xae\x2\x0\x3\x7\x1\x3\x6\x7\xc\u0110\x1\x3"
			 + "\x1\x7\x1\u0110\x2\x7\x1\x3\x1\u0110\x1\x7\x1\u0110\x1\x7" + "\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7" + "\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7" + "\x1\u0110\x1\x7\x1\u0110\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0"
			 + "\x6\x3\x1\x0\x1\x133\x2\x0\x3\u0100\x1\x0\x14\u0100\x1\x0" + "\x3\u0100\x1\u0101\x1\x0\x1e\u0100\x2\u0101\x2\x130\x1\x131\xf\x0" + "\x1\x12f\x2\x0\x3\u0101\x1\x0\x14\u0101\x1\x0\x4\u0101\x1\x0" + "\x20\u0101\x2\x130\x1\x131\xe\x0\x1\x3\x1\x35\x2\x0\x3\x7"
			 + "\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3\xc\x7\x2\xb0\x10\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0110\x1\x3\x1\x7\x1\u0110\x2\x7\x1\x3" + "\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7" + "\x1\u0110\x1\x7\x1\u0111\x1\xb0\x1\u0110\x1\x7\x1\u0110\x1\x7"
			 + "\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x1\x7\x1\u0110\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\xa\x0\x1\x8d\xb\x0" + "\x1\x8d\x49\x0\x1\x48\x3c\x0\x2\x4d\x1\x64\x18\x0\x1\x9c" + "\xb\x0\x1\x9c\x41\x0\x1\x99\x2\x0\x3\xdf\x1\x6f\x14\xdf"
			 + "\x1\x0\x3\xdf\x2\x0\x1e\xdf\x19\x0\x3\u0112\x1\x0\x14\u0112" + "\x1\x0\x3\u0112\x2\x0\x1e\u0112\x16\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x6\xed\x2\u0113\x14\xed" + "\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed"
			 + "\x2\x0\xc\xed\x2\u0114\xe\xed\x16\x0\x1\x13b\x2\x0\x3\xed" + "\x1\x0\x1\xed\x1\u0113\xb\xed\x1\u0113\x4\xed\x1\x0\x3\xed" + "\x2\x0\x1e\xed\x16\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed" + "\x1\x0\x3\xed\x2\x0\xc\xed\x2\u0115\xe\xed\x16\x0\x1\x13b"
			 + "\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x6\xed" + "\x2\x139\x14\xed\x15\x0\x1\x3\x1\xae\x2\x0\x3\x7\x1\x3" + "\x6\x7\xc\u0116\x1\x3\x1\x7\x1\u0116\x2\x7\x1\x3\x1\u0116" + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116"
			 + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116" + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x3\x7\x1\x3" + "\x1\x0\x5\x3\x2\x0\x7\x3\x1\xca\x2\x0\x3\x7\x1\x3" + "\x6\x7\xc\u0116\x1\x3\x1\x7\x1\u0116\x2\x7\x1\x3\x1\u0116"
			 + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116" + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116" + "\x1\x7\x1\u0116\x1\x7\x1\u0116\x1\x7\x1\u0116\x3\x7\x1\x3" + "\x1\x0\x5\x3\x2\x0\x6\x3\x1\x0\x1\u0117\x2\x0\x3\u0112"
			 + "\x1\x0\x14\u0112\x1\x0\x3\u0112\x2\x0\x1e\u0112\x16\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed\x2\x0\x16\xed" + "\x2\u0118\x4\xed\x16\x0\x1\x133\x2\x0\x3\xed\x1\x0\x14\xed" + "\x1\x0\x3\xed\x2\x0\x4\xed\x2\x177\x16\xed\x2\x0\x2\x130"
			 + "\x1\x131\xf\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0" + "\x3\xed\x2\x0\x6\xed\x2\x14c\x14\xed\x15\x0\x1\x3\x1\xae" + "\x2\x0\x3\x7\x1\x3\x6\x7\xc\u0119\x1\x3\x1\x7\x1\u0119" + "\x2\x7\x1\x3\x1\u0119\x1\x7\x1\u0119\x1\x7\x1\u0119\x1\x7"
			 + "\x1\u0119\x1\x7\x1\u0119\x1\x7\x1\u0119\x1\x7\x1\u0119\x1\x7" + "\x1\u0119\x1\x7\x1\u0119\x1\x7\x1\u0119\x1\x7\x1\u0119\x1\x7" + "\x1\u0119\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\x23\x0" + "\x1\u011a\x34\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0"
			 + "\x3\xed\x2\x0\x2\u011b\x1a\xed\x15\x0\x1\x3\x1\xae\x2\x0" + "\x3\x7\x1\x3\x6\x7\xc\u011c\x1\x3\x1\x7\x1\u011c\x2\x7" + "\x1\x3\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c" + "\x1\x7\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c"
			 + "\x1\x7\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c\x1\x7\x1\u011c" + "\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\x1\x0\x1\u011d" + "\x6a\x0\x1\x13b\x2\x0\x3\xed\x1\x0\x14\xed\x1\x0\x3\xed" + "\x2\x0\x2\xed\x2\u011e\x18\xed\x15\x0\x1\x3\x1\xae\x2\x0"
			 + "\x3\x7\x1\x3\x6\x7\xc\u011f\x1\x3\x1\x7\x1\u011f\x2\x7" + "\x1\x3\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f" + "\x1\x7\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f" + "\x1\x7\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f\x1\x7\x1\u011f"
			 + "\x3\x7\x1\x3\x1\x0\x5\x3\x2\x0\x6\x3\x4\x0\x3\u0120" + "\x1\x0\x14\u0120\x1\x0\x3\u0120\x2\x0\x1e\u0120\x16\x0\x1\x13b" + "\x2\x0\x3\xed\x1\x0\x5\xed\x1\x136\xb\xed\x1\x136\x1\x0" + "\x3\xed\x2\x0\x1e\xed\x15\x0\x1\x3\x1\xae\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\u0121\x1\x3\x1\x7\x1\u0121\x2\x7\x1\x3" + "\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x1\x7" + "\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x1\x7" + "\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x1\x7\x1\u0121\x3\x7"
			 + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0122\x1\x3\x1\x7\x1\u0122\x2\x7\x1\x3" + "\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x1\x7" + "\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x1\x7"
			 + "\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x1\x7\x1\u0122\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0123\x1\x3\x1\x7\x1\u0123\x2\x7\x1\x3" + "\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x1\x7"
			 + "\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x1\x7" + "\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x1\x7\x1\u0123\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0124\x1\x3\x1\x7\x1\u0124\x2\x7\x1\x3"
			 + "\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x1\x7" + "\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x1\x7" + "\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x1\x7\x1\u0124\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\u0125\x1\x3\x1\x7\x1\u0125\x2\x7\x1\x3" + "\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x1\x7" + "\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x1\x7" + "\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x1\x7\x1\u0125\x3\x7"
			 + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0126\x1\x3\x1\x7\x1\u0126\x2\x7\x1\x3" + "\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x1\x7" + "\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x1\x7"
			 + "\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x1\x7\x1\u0126\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0127\x1\x3\x1\x7\x1\u0127\x2\x7\x1\x3" + "\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x1\x7"
			 + "\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x1\x7" + "\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x1\x7\x1\u0127\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0128\x1\x3\x1\x7\x1\u0128\x2\x7\x1\x3"
			 + "\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x1\x7" + "\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x1\x7" + "\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x1\x7\x1\u0128\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\u0129\x1\x3\x1\x7\x1\u0129\x2\x7\x1\x3" + "\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x1\x7" + "\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x1\x7" + "\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x1\x7\x1\u0129\x3\x7"
			 + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u012a\x1\x3\x1\x7\x1\u012a\x2\x7\x1\x3" + "\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x1\x7" + "\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x1\x7"
			 + "\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x1\x7\x1\u012a\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u012b\x1\x3\x1\x7\x1\u012b\x2\x7\x1\x3" + "\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x1\x7"
			 + "\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x1\x7" + "\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x1\x7\x1\u012b\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u012c\x1\x3\x1\x7\x1\u012c\x2\x7\x1\x3"
			 + "\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x1\x7" + "\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x1\x7" + "\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x1\x7\x1\u012c\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\u012d\x1\x3\x1\x7\x1\u012d\x2\x7\x1\x3" + "\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x1\x7" + "\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x1\x7" + "\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x1\x7\x1\u012d\x3\x7"
			 + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u012e\x1\x3\x1\x7\x1\u012e\x2\x7\x1\x3" + "\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x1\x7" + "\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x1\x7"
			 + "\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x1\x7\x1\u012e\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u012f\x1\x3\x1\x7\x1\u012f\x2\x7\x1\x3" + "\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x1\x7"
			 + "\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x1\x7" + "\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x1\x7\x1\u012f\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0130\x1\x3\x1\x7\x1\u0130\x2\x7\x1\x3"
			 + "\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x1\x7" + "\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x1\x7" + "\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x1\x7\x1\u0130\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7"
			 + "\x1\x3\x6\x7\xc\u0131\x1\x3\x1\x7\x1\u0131\x2\x7\x1\x3" + "\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x1\x7" + "\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x1\x7" + "\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x1\x7\x1\u0131\x3\x7"
			 + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x6\x7\xc\u0132\x1\x3\x1\x7\x1\u0132\x2\x7\x1\x3" + "\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x1\x7" + "\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x1\x7"
			 + "\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x1\x7\x1\u0132\x3\x7" + "\x1\x3\x1\x0\x5\x3\x2\x0\x7\x3\x1\xae\x2\x0\x3\x7" + "\x1\x3\x14\x7\x1\x3\x4\x7\x1\x3\x20\x7\x1\x3\x1\x0" + "\x5\x3\x2\x0\x6\x3";

		private static int[] ZzUnpackTrans()
		{
			int[] result = new int[19525];
			int offset = 0;
			offset = ZzUnpackTrans(ZzTransPacked0, offset, result);
			return result;
		}

		private static int ZzUnpackTrans(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				value--;
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		private const int ZzUnknownError = 0;

		private const int ZzNoMatch = 1;

		private const int ZzPushback2big = 2;

		private static readonly string[] ZzErrorMsg = new string[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

		/// <summary>ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code></summary>
		private static readonly int[] ZzAttribute = ZzUnpackAttribute();

		private const string ZzAttributePacked0 = "\x2\x0\xf\x1\x1\xb\x2\x1\x1\xb\x4\x1\x1\xb\x1\x1" + "\x2\x0\x1\xb\x3\x0\x2\x1\x3\xb\x7\x0\xa\x1\x1\xb" + "\x1\x1\x4\xb\x1\x1\x4\x0\x1\xb\x1\x1\x3\x0\x1\xb" + "\x6\x0\x1\xb\x7\x0\xd\x1\x1\xb\x6\x0\x1\xb\x4\x0"
			 + "\x1\xb\x5\x0\x1\x1\x2\x0\x1\xb\x1\x0\x1\xb\x7\x0" + "\x2\x1\x1\x0\x2\x1\x1\x0\x5\x1\x5\x0\x1\x1\x5\x0" + "\x1\xb\x3\x0\x3\x1\x4\x0\xf\x1\x1\x0\x1\x1\x1\x0" + "\x4\x1\x4\x0\x3\x1\xa\x0\x1\x1\x1\x0\x2\xb\x1\x1" + "\x1\x0\x6\x1\x1\x0\x14\x1\x1\x0\x1\x1\x1\x0\x3\x1"
			 + "\x3\x0\x1\x1\x3\x0\x1\x1\x5\x0\x1\xb\x2\x0\xc\x1" + "\x1\x0\x2\x1\x1\x0\x2\x1\x1\xb\x1\x0\x1\x1\x3\x0" + "\x5\x1\x1\xb\x7\x1\x1\x0\x2\x1\x1\x0\x2\x1\x1\x0" + "\x19\x1";

		/* error codes */
		/* error messages for the codes above */
		private static int[] ZzUnpackAttribute()
		{
			int[] result = new int[306];
			int offset = 0;
			offset = ZzUnpackAttribute(ZzAttributePacked0, offset, result);
			return result;
		}

		private static int ZzUnpackAttribute(string packed, int offset, int[] result)
		{
			int i = 0;
			/* index in packed string  */
			int j = offset;
			/* index in unpacked array */
			int l = packed.Length;
			while (i < l)
			{
				int count = packed[i++];
				int value = packed[i++];
				do
				{
					result[j++] = value;
				}
				while (--count > 0);
			}
			return j;
		}

		/// <summary>the input device</summary>
		private Reader zzReader;

		/// <summary>the current state of the DFA</summary>
		private int zzState;

		/// <summary>the current lexical state</summary>
		private int zzLexicalState = Yyinitial;

		/// <summary>
		/// this buffer contains the current text to be matched and is
		/// the source of the yytext() string
		/// </summary>
		private char[] zzBuffer = new char[ZzBuffersize];

		/// <summary>the textposition at the last accepting state</summary>
		private int zzMarkedPos;

		/// <summary>the current text position in the buffer</summary>
		private int zzCurrentPos;

		/// <summary>startRead marks the beginning of the yytext() string in the buffer</summary>
		private int zzStartRead;

		/// <summary>
		/// endRead marks the last character in the buffer, that has been read
		/// from input
		/// </summary>
		private int zzEndRead;

		/// <summary>number of newlines encountered up to the start of the matched text</summary>
		private int yyline;

		/// <summary>the number of characters up to the start of the matched text</summary>
		private int yychar;

		/// <summary>
		/// the number of characters from the last newline up to the start of the
		/// matched text
		/// </summary>
		private int yycolumn;

		/// <summary>zzAtBOL == true <=> the scanner is currently at the beginning of a line</summary>
		private bool zzAtBOL = true;

		/// <summary>zzAtEOF == true <=> the scanner is at the EOF</summary>
		private bool zzAtEOF;

		/// <summary>denotes if the user-EOF-code has already been executed</summary>
		private bool zzEOFDone;

		/* user code: */
		/*
		"'T WAS"
		{ return("'TWAS"); }
		"'T was"
		{ return("'Twas"); }
		"'t was"
		{ return("'twas"); }
		"'T IS"
		{ return("'TIS"); }
		"'T is"
		{ return("'Tis"); }
		"'t is"
		{ return("'tis"); }
		*/
		private static string RemoveWhite(string @in)
		{
			StringBuilder @out = new StringBuilder();
			for (int i = 0; i < len; i++)
			{
				char ch = @in[i];
				if (ch != ' ')
				{
					@out.Append(ch);
				}
			}
			return @out.ToString();
		}

		/// <summary>
		/// Creates a new scanner
		/// There is also a java.io.InputStream version of this constructor.
		/// </summary>
		/// <param name="in">the java.io.Reader to read input from.</param>
		internal PTB2TextLexer(Reader @in)
		{
			this.zzReader = @in;
		}

		/// <summary>Creates a new scanner.</summary>
		/// <remarks>
		/// Creates a new scanner.
		/// There is also java.io.Reader version of this constructor.
		/// </remarks>
		/// <param name="in">the java.io.Inputstream to read input from.</param>
		internal PTB2TextLexer(InputStream @in)
			: this(new InputStreamReader(@in, Java.Nio.Charset.Charset.ForName("UTF-8")))
		{
		}

		/// <summary>Unpacks the compressed character translation table.</summary>
		/// <param name="packed">the packed character translation table</param>
		/// <returns>the unpacked character translation table</returns>
		private static char[] ZzUnpackCMap(string packed)
		{
			char[] map = new char[unchecked((int)(0x10000))];
			int i = 0;
			/* index in packed string  */
			int j = 0;
			/* index in unpacked array */
			while (i < 1768)
			{
				int count = packed[i++];
				char value = packed[i++];
				do
				{
					map[j++] = value;
				}
				while (--count > 0);
			}
			return map;
		}

		/// <summary>Refills the input buffer.</summary>
		/// <returns><code>false</code>, iff there was new input.</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		private bool ZzRefill()
		{
			/* first: make room (if you can) */
			if (zzStartRead > 0)
			{
				System.Array.Copy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
				/* translate stored positions */
				zzEndRead -= zzStartRead;
				zzCurrentPos -= zzStartRead;
				zzMarkedPos -= zzStartRead;
				zzStartRead = 0;
			}
			/* is the buffer big enough? */
			if (zzCurrentPos >= zzBuffer.Length)
			{
				/* if not: blow it up */
				char[] newBuffer = new char[zzCurrentPos * 2];
				System.Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
				zzBuffer = newBuffer;
			}
			/* finally: fill the buffer with new input */
			int numRead = zzReader.Read(zzBuffer, zzEndRead, zzBuffer.Length - zzEndRead);
			if (numRead > 0)
			{
				zzEndRead += numRead;
				return false;
			}
			// unlikely but not impossible: read 0 characters, but not at end of stream    
			if (numRead == 0)
			{
				int c = zzReader.Read();
				if (c == -1)
				{
					return true;
				}
				else
				{
					zzBuffer[zzEndRead++] = (char)c;
					return false;
				}
			}
			// numRead < 0
			return true;
		}

		/// <summary>Closes the input stream.</summary>
		/// <exception cref="System.IO.IOException"/>
		public void Yyclose()
		{
			zzAtEOF = true;
			/* indicate end of file */
			zzEndRead = zzStartRead;
			/* invalidate buffer    */
			if (zzReader != null)
			{
				zzReader.Close();
			}
		}

		/// <summary>Resets the scanner to read from a new input stream.</summary>
		/// <remarks>
		/// Resets the scanner to read from a new input stream.
		/// Does not close the old reader.
		/// All internal variables are reset, the old input stream
		/// <b>cannot</b> be reused (internal buffer is discarded and lost).
		/// Lexical state is set to <tt>ZZ_INITIAL</tt>.
		/// Internal scan buffer is resized down to its initial length, if it has grown.
		/// </remarks>
		/// <param name="reader">the new input stream</param>
		public void Yyreset(Reader reader)
		{
			zzReader = reader;
			zzAtBOL = true;
			zzAtEOF = false;
			zzEOFDone = false;
			zzEndRead = zzStartRead = 0;
			zzCurrentPos = zzMarkedPos = 0;
			yyline = yychar = yycolumn = 0;
			zzLexicalState = Yyinitial;
			if (zzBuffer.Length > ZzBuffersize)
			{
				zzBuffer = new char[ZzBuffersize];
			}
		}

		/// <summary>Returns the current lexical state.</summary>
		public int Yystate()
		{
			return zzLexicalState;
		}

		/// <summary>Enters a new lexical state</summary>
		/// <param name="newState">the new lexical state</param>
		public void Yybegin(int newState)
		{
			zzLexicalState = newState;
		}

		/// <summary>Returns the text matched by the current regular expression.</summary>
		public string Yytext()
		{
			return new string(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
		}

		/// <summary>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// </summary>
		/// <remarks>
		/// Returns the character at position <tt>pos</tt> from the
		/// matched text.
		/// It is equivalent to yytext().charAt(pos), but faster
		/// </remarks>
		/// <param name="pos">
		/// the position of the character to fetch.
		/// A value from 0 to yylength()-1.
		/// </param>
		/// <returns>the character at position pos</returns>
		public char Yycharat(int pos)
		{
			return zzBuffer[zzStartRead + pos];
		}

		/// <summary>Returns the length of the matched text region.</summary>
		public int Yylength()
		{
			return zzMarkedPos - zzStartRead;
		}

		/// <summary>Reports an error that occured while scanning.</summary>
		/// <remarks>
		/// Reports an error that occured while scanning.
		/// In a wellformed scanner (no or only correct usage of
		/// yypushback(int) and a match-all fallback rule) this method
		/// will only be called with things that "Can't Possibly Happen".
		/// If this method is called, something is seriously wrong
		/// (e.g. a JFlex bug producing a faulty scanner etc.).
		/// Usual syntax/scanner level error handling should be done
		/// in error fallback rules.
		/// </remarks>
		/// <param name="errorCode">the code of the errormessage to display</param>
		private void ZzScanError(int errorCode)
		{
			string message;
			try
			{
				message = ZzErrorMsg[errorCode];
			}
			catch (IndexOutOfRangeException)
			{
				message = ZzErrorMsg[ZzUnknownError];
			}
			throw new Exception(message);
		}

		/// <summary>Pushes the specified amount of characters back into the input stream.</summary>
		/// <remarks>
		/// Pushes the specified amount of characters back into the input stream.
		/// They will be read again by then next call of the scanning method
		/// </remarks>
		/// <param name="number">
		/// the number of characters to be read again.
		/// This number must not be greater than yylength()!
		/// </param>
		public virtual void Yypushback(int number)
		{
			if (number > Yylength())
			{
				ZzScanError(ZzPushback2big);
			}
			zzMarkedPos -= number;
		}

		/// <summary>
		/// Resumes scanning until the next regular expression is matched,
		/// the end of input is encountered or an I/O-Error occurs.
		/// </summary>
		/// <returns>the next token</returns>
		/// <exception>
		/// java.io.IOException
		/// if any I/O-Error occurs
		/// </exception>
		/// <exception cref="System.IO.IOException"/>
		public virtual string Next()
		{
			int zzInput;
			int zzAction;
			// cached fields:
			int zzCurrentPosL;
			int zzMarkedPosL;
			int zzEndReadL = zzEndRead;
			char[] zzBufferL = zzBuffer;
			char[] zzCMapL = ZzCmap;
			int[] zzTransL = ZzTrans;
			int[] zzRowMapL = ZzRowmap;
			int[] zzAttrL = ZzAttribute;
			while (true)
			{
				zzMarkedPosL = zzMarkedPos;
				zzAction = -1;
				zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
				zzState = ZzLexstate[zzLexicalState];
				// set up zzAction for empty match case:
				int zzAttributes = zzAttrL[zzState];
				if ((zzAttributes & 1) == 1)
				{
					zzAction = zzState;
				}
				while (true)
				{
					if (zzCurrentPosL < zzEndReadL)
					{
						zzInput = zzBufferL[zzCurrentPosL++];
					}
					else
					{
						if (zzAtEOF)
						{
							zzInput = Yyeof;
							goto zzForAction_break;
						}
						else
						{
							// store back cached positions
							zzCurrentPos = zzCurrentPosL;
							zzMarkedPos = zzMarkedPosL;
							bool eof = ZzRefill();
							// get translated positions and possibly new buffer
							zzCurrentPosL = zzCurrentPos;
							zzMarkedPosL = zzMarkedPos;
							zzBufferL = zzBuffer;
							zzEndReadL = zzEndRead;
							if (eof)
							{
								zzInput = Yyeof;
								goto zzForAction_break;
							}
							else
							{
								zzInput = zzBufferL[zzCurrentPosL++];
							}
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
					{
						goto zzForAction_break;
					}
					zzState = zzNext;
					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
						{
							goto zzForAction_break;
						}
					}
				}
zzForAction_break: ;
				// store back cached position
				zzMarkedPos = zzMarkedPosL;
				switch (zzAction < 0 ? zzAction : ZzAction[zzAction])
				{
					case 1:
					{
						return (Yytext());
					}

					case 31:
					{
						break;
					}

					case 2:
					{
						Yybegin(Inquote);
						return "\"";
					}

					case 32:
					{
						break;
					}

					case 3:
					{
						return "&";
					}

					case 33:
					{
						break;
					}

					case 4:
					{
						Yybegin(Yyinitial);
						return (Yytext());
					}

					case 34:
					{
						break;
					}

					case 5:
					{
						return Yytext();
					}

					case 35:
					{
						break;
					}

					case 6:
					{
						Yybegin(Yyinitial);
						return "\"";
					}

					case 36:
					{
						break;
					}

					case 7:
					{
						return (Sharpen.Runtime.Substring(Yytext(), 1, Yytext().Length));
					}

					case 37:
					{
						break;
					}

					case 8:
					{
						return (")");
					}

					case 38:
					{
						break;
					}

					case 9:
					{
						return ("}");
					}

					case 39:
					{
						break;
					}

					case 10:
					{
						return ("%");
					}

					case 40:
					{
						break;
					}

					case 11:
					{
						return ("`");
					}

					case 41:
					{
						break;
					}

					case 12:
					{
						return "/";
					}

					case 42:
					{
						break;
					}

					case 13:
					{
						return "(";
					}

					case 43:
					{
						break;
					}

					case 14:
					{
						return ("{");
					}

					case 44:
					{
						break;
					}

					case 15:
					{
						return ("$");
					}

					case 45:
					{
						break;
					}

					case 16:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						return "\"";
					}

					case 46:
					{
						break;
					}

					case 17:
					{
						return "\"";
					}

					case 47:
					{
						break;
					}

					case 18:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						Yybegin(Inquote);
						return "\"";
					}

					case 48:
					{
						break;
					}

					case 19:
					{
						return ("\"");
					}

					case 49:
					{
						break;
					}

					case 20:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(2);
						return "\"";
					}

					case 50:
					{
						break;
					}

					case 21:
					{
						return ("n't");
					}

					case 51:
					{
						break;
					}

					case 22:
					{
						return "<";
					}

					case 52:
					{
						break;
					}

					case 23:
					{
						return ">";
					}

					case 53:
					{
						break;
					}

					case 24:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						Yybegin(Inquote);
						return "\" \"";
					}

					case 54:
					{
						break;
					}

					case 25:
					{
						return RemoveWhite(Yytext());
					}

					case 55:
					{
						break;
					}

					case 26:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						return Yytext();
					}

					case 56:
					{
						break;
					}

					case 27:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						return Yytext();
					}

					case 57:
					{
						break;
					}

					case 28:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(2);
						return Yytext();
					}

					case 58:
					{
						break;
					}

					case 29:
					{
						return "cannot";
					}

					case 59:
					{
						break;
					}

					case 30:
					{
						// lookahead expression with fixed lookahead length
						Yypushback(1);
						return RemoveWhite(Yytext());
					}

					case 60:
					{
						break;
					}

					default:
					{
						if (zzInput == Yyeof && zzStartRead == zzCurrentPos)
						{
							zzAtEOF = true;
							{
								return null;
							}
						}
						else
						{
							ZzScanError(ZzNoMatch);
						}
						break;
					}
				}
			}
		}
	}
}
